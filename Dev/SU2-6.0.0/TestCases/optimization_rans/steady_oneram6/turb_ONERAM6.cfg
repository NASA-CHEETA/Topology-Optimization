%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%                                                                              %
% SU2 configuration file                                                       %
% Case description: Transonic turbulent flow around a ONERA M6 wing (steady)   %
% Author: Francisco Palacios                                                   %
% Institution: Stanford University                                             %
% Date: 2011.11.02                                                             %
% File Version 6.0.0 "Falcon"                                                %
%                                                                              %
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%

% ------------- DIRECT, ADJOINT, AND LINEARIZED PROBLEM DEFINITION ------------%
%
% Physical governing equations (EULER, NAVIER_STOKES,
%                               WAVE_EQUATION, HEAT_EQUATION, FEM_ELASTICITY,
%                               POISSON_EQUATION)            
PHYSICAL_PROBLEM= NAVIER_STOKES
%
% Specify turbulence model (NONE, SA, SA_NEG, SST)
KIND_TURB_MODEL= SA
%
% Mathematical problem (DIRECT, CONTINUOUS_ADJOINT)
MATH_PROBLEM= DIRECT
%
% Restart solution (NO, YES)
RESTART_SOL= YES

% -------------------- COMPRESSIBLE FREE-STREAM DEFINITION --------------------%
%
% Mach number (non-dimensional, based on the free-stream values)
MACH_NUMBER= 0.8395
%
% Angle of attack (degrees, only for compressible flows)
AOA= 3.06
%
% Side-slip angle (degrees, only for compressible flows)
SIDESLIP_ANGLE= 0.0
%
% Free-stream temperature (288.15 K by default)
FREESTREAM_TEMPERATURE= 288.15
%
% Reynolds number (non-dimensional, based on the free-stream values)
REYNOLDS_NUMBER= 11.72E6
%
% Reynolds length (1 m by default)
REYNOLDS_LENGTH= 0.64607

% ---------------------- REFERENCE VALUE DEFINITION ---------------------------%
%
% Reference origin for moment computation
REF_ORIGIN_MOMENT_X = 0.25
REF_ORIGIN_MOMENT_Y = 0.00
REF_ORIGIN_MOMENT_Z = 0.00
%
% Reference length for pitching, rolling, and yawing non-dimensional moment
REF_LENGTH= 0.64607
%
% Reference area for force coefficients (0 implies automatic calculation)
REF_AREA= 0

% -------------------- BOUNDARY CONDITION DEFINITION --------------------------%
%
% Navier-Stokes wall boundary marker(s) (NONE = no marker)
MARKER_HEATFLUX= ( wing, 0.0 )
%
% Far-field boundary marker(s) (NONE = no marker)
MARKER_FAR= ( farfield )
%
% Symmetry boundary marker(s) (NONE = no marker)
MARKER_SYM= ( symmetry )
%
% Marker(s) of the surface to be plotted or designed
MARKER_PLOTTING= ( wing )
%
% Marker(s) of the surface where the functional (Cd, Cl, etc.) will be evaluated
MARKER_MONITORING= ( wing )

% ------------- COMMON PARAMETERS DEFINING THE NUMERICAL METHOD ---------------%
%
% Numerical method for spatial gradients (GREEN_GAUSS, WEIGHTED_LEAST_SQUARES)
NUM_METHOD_GRAD= GREEN_GAUSS
%
% Courant-Friedrichs-Lewy condition of the finest grid
CFL_NUMBER= 4.0
%
% Adaptive CFL number (NO, YES)
CFL_ADAPT= NO
%
% Parameters of the adaptive CFL number (factor down, factor up, CFL min value,
%                                        CFL max value )
CFL_ADAPT_PARAM= ( 1.5, 0.5, 1.0, 100.0 )
%
% Runge-Kutta alpha coefficients
RK_ALPHA_COEFF= ( 0.66667, 0.66667, 1.000000 )
%
% Number of total iterations
EXT_ITER= 10000

% ------------------------ LINEAR SOLVER DEFINITION ---------------------------%
%
% Linear solver for the implicit (or discrete adjoint) formulation (BCGSTAB, FGMRES)
LINEAR_SOLVER= FGMRES
%
% Preconditioner of the Krylov linear solver (NONE, JACOBI, LINELET)
LINEAR_SOLVER_PREC= LU_SGS
%
% Min error of the linear solver for the implicit formulation
LINEAR_SOLVER_ERROR= 1E-5
%
% Max number of iterations of the linear solver for the implicit formulation
LINEAR_SOLVER_ITER= 2

% -------------------------- MULTIGRID PARAMETERS -----------------------------%
%
% Multi-Grid Levels (0 = no multi-grid)
MGLEVEL= 2
%
% Multi-grid cycle (V_CYCLE, W_CYCLE, FULLMG_CYCLE)
MGCYCLE= V_CYCLE
%
% Multi-grid pre-smoothing level
MG_PRE_SMOOTH= ( 1, 2, 3, 3 )
%
% Multi-grid post-smoothing level
MG_POST_SMOOTH= ( 0, 0, 0, 0 )
%
% Jacobi implicit smoothing of the correction
MG_CORRECTION_SMOOTH= ( 0, 0, 0, 0 )
%
% Damping factor for the residual restriction
MG_DAMP_RESTRICTION= 0.7
%
% Damping factor for the correction prolongation
MG_DAMP_PROLONGATION= 0.7

% -------------------- FLOW NUMERICAL METHOD DEFINITION -----------------------%
%
% Convective numerical method (JST, LAX-FRIEDRICH, CUSP, ROE, AUSM, HLLC,
%                              TURKEL_PREC, MSW)
CONV_NUM_METHOD_FLOW= JST
%
% Monotonic Upwind Scheme for Conservation Laws (TVD) in the flow equations.
%           Required for 2nd order upwind schemes (NO, YES)
MUSCL_FLOW= YES
%
% Slope limiter (VENKATAKRISHNAN, MINMOD)
SLOPE_LIMITER_FLOW= VENKATAKRISHNAN
%
% Coefficient for the limiter (smooth regions)
VENKAT_LIMITER_COEFF= 0.03
%
% 2nd and 4th order artificial dissipation coefficients
JST_SENSOR_COEFF= ( 0.5, 0.02 )
%
% Time discretization (RUNGE-KUTTA_EXPLICIT, EULER_IMPLICIT, EULER_EXPLICIT)
TIME_DISCRE_FLOW= EULER_IMPLICIT

% -------------------- TURBULENT NUMERICAL METHOD DEFINITION ------------------%
%
% Convective numerical method (SCALAR_UPWIND)
CONV_NUM_METHOD_TURB= SCALAR_UPWIND
%
% Monotonic Upwind Scheme for Conservation Laws (TVD) in the turbulence equations.
%           Required for 2nd order upwind schemes (NO, YES)
MUSCL_TURB= NO
%
% Slope limiter (VENKATAKRISHNAN, MINMOD)
SLOPE_LIMITER_TURB= VENKATAKRISHNAN
%
% Time discretization (EULER_IMPLICIT)
TIME_DISCRE_TURB= EULER_IMPLICIT

% ---------------- ADJOINT-FLOW NUMERICAL METHOD DEFINITION -------------------%
% Adjoint problem boundary condition (DRAG, LIFT, SIDEFORCE, MOMENT_X,
%                                     MOMENT_Y, MOMENT_Z, EFFICIENCY, 
%                                     EQUIVALENT_AREA, NEARFIELD_PRESSURE,
%                                     FORCE_X, FORCE_Y, FORCE_Z, THRUST, 
%                                     TORQUE, FREE_SURFACE)
OBJECTIVE_FUNCTION= DRAG
%
% Convective numerical method (JST, LAX-FRIEDRICH, ROE)
CONV_NUM_METHOD_ADJFLOW= JST
%
% Slope limiter (VENKATAKRISHNAN, SHARP_EDGES)
SLOPE_LIMITER_ADJFLOW= VENKATAKRISHNAN
%
% Coefficient for the sharp edges limiter
ADJ_SHARP_LIMITER_COEFF= 3.0
%
% 2nd, and 4th order artificial dissipation coefficients
ADJ_JST_SENSOR_COEFF= ( 0.0, 0.02 )
%
% Time discretization (RUNGE-KUTTA_EXPLICIT, EULER_IMPLICIT)
TIME_DISCRE_ADJFLOW= EULER_IMPLICIT
%
% Reduction factor of the CFL coefficient in the adjoint problem
CFL_REDUCTION_ADJFLOW= 0.8
%
% Remove sharp edges from the sensitivity evaluation (NO, YES)
SENS_REMOVE_SHARP= NO

% ----------------------- GEOMETRY EVALUATION PARAMETERS ----------------------%
%
% Geometrical evaluation mode (FUNCTION, GRADIENT)
GEO_MODE= FUNCTION
%
% Marker(s) of the surface where geometrical based func. will be evaluated
GEO_MARKER= ( wing )
%
% Orientation of airfoil sections (X_AXIS, Y_AXIS, Z_AXIS)
GEO_AXIS_STATIONS= Y_AXIS
%
% Location (coordinate) of the airfoil sections (MinValue, MaxValue)
GEO_WING_BOUNDS= (0.0806, 1.1284)
%
% Plot loads and Cp distributions on each airfoil section
GEO_PLOT_STATIONS= NO

% ------------------------ GRID DEFORMATION PARAMETERS ------------------------%
%
% Kind of deformation (FFD_SETTING, FFD_CONTROL_POINT_2D, FFD_CAMBER_2D, FFD_THICKNESS_2D,
%                      HICKS_HENNE, PARABOLIC,
%                      NACA_4DIGITS, DISPLACEMENT, ROTATION, FFD_CONTROL_POINT, 
%                      FFD_NACELLE, FFD_TWIST, FFD_ROTATION,
%                      FFD_CAMBER, FFD_THICKNESS, SURFACE_FILE)
DV_KIND= FFD_CONTROL_POINT
%
% Marker of the surface in which we are going apply the shape deformation
DV_MARKER= ( wing )
%
% Parameters of the shape deformation
%       - HICKS_HENNE ( Lower Surface (0)/Upper Surface (1)/Only one Surface (2), x_Loc )
%       - NACA_4DIGITS ( 1st digit, 2nd digit, 3rd and 4th digit )
%       - PARABOLIC ( Center, Thickness )
%       - DISPLACEMENT ( x_Disp, y_Disp, z_Disp )
%       - ROTATION ( x_Orig, y_Orig, z_Orig, x_End, y_End, z_End )
%       - OBSTACLE ( Center, Bump size )
%       - FFD_CONTROL_POINT ( FFD_BoxTag ID, i_Ind, j_Ind, k_Ind, x_Disp, y_Disp, z_Disp )
%       - FFD_DIHEDRAL_ANGLE ( FFD_BoxTag ID, x_Orig, y_Orig, z_Orig, x_End, y_End, z_End )
%       - FFD_TWIST_ANGLE ( FFD_BoxTag ID, x_Orig, y_Orig, z_Orig, x_End, y_End, z_End )
%       - FFD_ROTATION ( FFD_BoxTag ID, x_Orig, y_Orig, z_Orig, x_End, y_End, z_End )
%       - FFD_CAMBER ( FFD_BoxTag ID, i_Ind, j_Ind )
%       - FFD_THICKNESS ( FFD_BoxTag ID, i_Ind, j_Ind )
%       - FFD_VOLUME ( FFD_BoxTag ID, i_Ind, j_Ind )
DV_PARAM= ( WING_BOX, 2, 2, 1, 0.0, 0.0, 1.0 )
%
% New value of the shape deformation
DV_VALUE= 0.1
%
% Visualize the deformation (NO, YES)
VISUALIZE_DEFORMATION= NO

% --------------------------- CONVERGENCE PARAMETERS --------------------------%
%
% Convergence criteria (CAUCHY, RESIDUAL)
%
CONV_CRITERIA= CAUCHY
%
% Residual reduction (order of magnitude with respect to the initial value)
RESIDUAL_REDUCTION= 3
%
% Min value of the residual (log10 of the residual)
RESIDUAL_MINVAL= -8
%
% Start convergence criteria at iteration number
STARTCONV_ITER= 1
%
% Number of elements to apply the criteria
CAUCHY_ELEMS= 100
%
% Epsilon to control the series convergence
CAUCHY_EPS= 1E-5
%
% Function to apply the criteria (LIFT, DRAG, NEARFIELD_PRESS, SENS_GEOMETRY, 
% 	      	    		 SENS_MACH, DELTA_LIFT, DELTA_DRAG)
CAUCHY_FUNC_FLOW= DRAG
CAUCHY_FUNC_ADJFLOW= SENS_GEOMETRY

% ------------------------- INPUT/OUTPUT INFORMATION --------------------------%
%
% Mesh input file
MESH_FILENAME= mesh_ONERAM6_turb.su2
%
% Mesh input file format (SU2, CGNS, NETCDF_ASCII)
MESH_FORMAT= SU2
%
% Mesh output file
MESH_OUT_FILENAME= mesh_out.su2
%
% Restart flow input file
SOLUTION_FLOW_FILENAME= solution_flow.dat
%
% Restart adjoint input file
SOLUTION_ADJ_FILENAME= solution_adj.dat
%
% Output file format (PARAVIEW, TECPLOT, STL)
OUTPUT_FORMAT= TECPLOT
%
% Output file convergence history (w/o extension) 
CONV_FILENAME= history
%
% Output file restart flow
RESTART_FLOW_FILENAME= restart_flow.dat
%
% Output file restart adjoint
RESTART_ADJ_FILENAME= restart_adj.dat
%
% Output file flow (w/o extension) variables
VOLUME_FLOW_FILENAME= flow
%
% Output file adjoint (w/o extension) variables
VOLUME_ADJ_FILENAME= adjoint
%
% Output objective function gradient (using continuous adjoint)
GRAD_OBJFUNC_FILENAME= of_grad.dat
%
% Output file surface flow coefficient (w/o extension)
SURFACE_FLOW_FILENAME= surface_flow
%
% Output file surface adjoint coefficient (w/o extension)
SURFACE_ADJ_FILENAME= surface_adjoint
%
% Writing solution file frequency
WRT_SOL_FREQ= 1000
%
% Writing convergence history frequency
WRT_CON_FREQ= 1
%
% Writing convergence history frequency (dual time, only written to screen)
WRT_CON_FREQ_DUALTIME= 25

% --------------------- OPTIMAL SHAPE DESIGN DEFINITION -----------------------%
%
% Objective function (DRAG, LIFT, SIDEFORCE, PRESSURE, MOMENT_X, MOMENT_Y,
%                     MOMENT_Z, EFFICIENCY, EQUIVALENT_AREA, NEARFIELD_PRESSURE,
%                     FORCE_X, FORCE_Y, FORCE_Z, THRUST, TORQUE, FIGURE_OF_MERIT
%                     FREESURFACE)

% Optimization objective function with optional scaling factor
% ex= Objective * Scale
OPT_OBJECTIVE= DRAG * 0.001

% Optimization constraint functions with scaling factors, separated by semicolons
% ex= (Objective = Value ) * Scale, use '>','<','='
OPT_CONSTRAINT= (LIFT > 0.268) * 0.001

% List of design variables (Design variables are separated by semicolons)
%  - FFD_CONTROL_POINT ( 7, Scale | Mark. List | FFD_BoxTag, i_Ind, j_Ind, k_Ind, x_Mov, y_Mov, z_Mov )
DEFINITION_DV= ( 7, 1.0 | wing | WING_BOX, 0, 0, 1, 0.0, 0.0, 1.0 ); ( 7, 1.0 | wing | WING_BOX, 1, 0, 1, 0.0, 0.0, 1.0 ); ( 7, 1.0 | wing | WING_BOX, 2, 0, 1, 0.0, 0.0, 1.0 ); ( 7, 1.0 | wing | WING_BOX, 3, 0, 1, 0.0, 0.0, 1.0 ); ( 7, 1.0 | wing | WING_BOX, 4, 0, 1, 0.0, 0.0, 1.0 ); ( 7, 1.0 | wing | WING_BOX, 0, 1, 1, 0.0, 0.0, 1.0 ); ( 7, 1.0 | wing | WING_BOX, 1, 1, 1, 0.0, 0.0, 1.0 ); ( 7, 1.0 | wing | WING_BOX, 2, 1, 1, 0.0, 0.0, 1.0 ); ( 7, 1.0 | wing | WING_BOX, 3, 1, 1, 0.0, 0.0, 1.0 ); ( 7, 1.0 | wing | WING_BOX, 4, 1, 1, 0.0, 0.0, 1.0 ); ( 7, 1.0 | wing | WING_BOX, 0, 2, 1, 0.0, 0.0, 1.0 ); ( 7, 1.0 | wing | WING_BOX, 1, 2, 1, 0.0, 0.0, 1.0 ); ( 7, 1.0 | wing | WING_BOX, 2, 2, 1, 0.0, 0.0, 1.0 ); ( 7, 1.0 | wing | WING_BOX, 3, 2, 1, 0.0, 0.0, 1.0 ); ( 7, 1.0 | wing | WING_BOX, 4, 2, 1, 0.0, 0.0, 1.0 ); ( 7, 1.0 | wing | WING_BOX, 0, 3, 1, 0.0, 0.0, 1.0 ); ( 7, 1.0 | wing | WING_BOX, 1, 3, 1, 0.0, 0.0, 1.0 ); ( 7, 1.0 | wing | WING_BOX, 2, 3, 1, 0.0, 0.0, 1.0 ); ( 7, 1.0 | wing | WING_BOX, 3, 3, 1, 0.0, 0.0, 1.0 ); ( 7, 1.0 | wing | WING_BOX, 4, 3, 1, 0.0, 0.0, 1.0 ); ( 7, 1.0 | wing | WING_BOX, 0, 4, 1, 0.0, 0.0, 1.0 ); ( 7, 1.0 | wing | WING_BOX, 1, 4, 1, 0.0, 0.0, 1.0 ); ( 7, 1.0 | wing | WING_BOX, 2, 4, 1, 0.0, 0.0, 1.0 ); ( 7, 1.0 | wing | WING_BOX, 3, 4, 1, 0.0, 0.0, 1.0 ); ( 7, 1.0 | wing | WING_BOX, 4, 4, 1, 0.0, 0.0, 1.0 ); ( 7, 1.0 | wing | WING_BOX, 0, 0, 0, 0.0, 0.0, 1.0 ); ( 7, 1.0 | wing | WING_BOX, 1, 0, 0, 0.0, 0.0, 1.0 ); ( 7, 1.0 | wing | WING_BOX, 2, 0, 0, 0.0, 0.0, 1.0 ); ( 7, 1.0 | wing | WING_BOX, 3, 0, 0, 0.0, 0.0, 1.0 ); ( 7, 1.0 | wing | WING_BOX, 4, 0, 0, 0.0, 0.0, 1.0 ); ( 7, 1.0 | wing | WING_BOX, 0, 1, 0, 0.0, 0.0, 1.0 ); ( 7, 1.0 | wing | WING_BOX, 1, 1, 0, 0.0, 0.0, 1.0 ); ( 7, 1.0 | wing | WING_BOX, 2, 1, 0, 0.0, 0.0, 1.0 ); ( 7, 1.0 | wing | WING_BOX, 3, 1, 0, 0.0, 0.0, 1.0 ); ( 7, 1.0 | wing | WING_BOX, 4, 1, 0, 0.0, 0.0, 1.0 ); ( 7, 1.0 | wing | WING_BOX, 0, 2, 0, 0.0, 0.0, 1.0 ); ( 7, 1.0 | wing | WING_BOX, 1, 2, 0, 0.0, 0.0, 1.0 ); ( 7, 1.0 | wing | WING_BOX, 2, 2, 0, 0.0, 0.0, 1.0 ); ( 7, 1.0 | wing | WING_BOX, 3, 2, 0, 0.0, 0.0, 1.0 ); ( 7, 1.0 | wing | WING_BOX, 4, 2, 0, 0.0, 0.0, 1.0 ); ( 7, 1.0 | wing | WING_BOX, 0, 3, 0, 0.0, 0.0, 1.0 ); ( 7, 1.0 | wing | WING_BOX, 1, 3, 0, 0.0, 0.0, 1.0 ); ( 7, 1.0 | wing | WING_BOX, 2, 3, 0, 0.0, 0.0, 1.0 ); ( 7, 1.0 | wing | WING_BOX, 3, 3, 0, 0.0, 0.0, 1.0 ); ( 7, 1.0 | wing | WING_BOX, 4, 3, 0, 0.0, 0.0, 1.0 ); ( 7, 1.0 | wing | WING_BOX, 0, 4, 0, 0.0, 0.0, 1.0 ); ( 7, 1.0 | wing | WING_BOX, 1, 4, 0, 0.0, 0.0, 1.0 ); ( 7, 1.0 | wing | WING_BOX, 2, 4, 0, 0.0, 0.0, 1.0 ); ( 7, 1.0 | wing | WING_BOX, 3, 4, 0, 0.0, 0.0, 1.0 ); ( 7, 1.0 | wing | WING_BOX, 4, 4, 0, 0.0, 0.0, 1.0 )
