.-
.- MeDiPack, a Message Differentiation Package
.-
.- Copyright (C) 2017 Chair for Scientific Computing (SciComp), TU Kaiserslautern
.- Homepage: http://www.scicomp.uni-kl.de
.- Contact:  Prof. Nicolas R. Gauger (codi@scicomp.uni-kl.de)
.-
.- Lead developers: Max Sagebaum (SciComp, TU Kaiserslautern)
.-
.- This file is part of MeDiPack (http://www.scicomp.uni-kl.de/software/codi).
.-
.- MeDiPack is free software: you can redistribute it and/or
.- modify it under the terms of the GNU General Public License
.- as published by the Free Software Foundation, either version 3 of the
.- License, or (at your option) any later version.
.-
.- MeDiPack is distributed in the hope that it will be useful,
.- but WITHOUT ANY WARRANTY; without even the implied warranty
.- of MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.
.-
.- See the GNU General Public License for more details.
.- You should have received a copy of the GNU
.- General Public License along with MeDiPack.
.- If not, see <http://www.gnu.org/licenses/>.
.-
.- Authors: Max Sagebaum (SciComp, TU Kaiserslautern)
.-
.
.ignorecase = 0
.
.include "templates/medi/basicTemplates.gsl"
.
.template 0

function addHandleData(handle, pack, del, name, type, cp)
  new my.handle.item
    define item.name = my.name
    define item.type = my.type
    define item.pack = my.pack
    define item.del = my.del
    if(defined(my.cp))
      define item.cp = my.cp
    else
      define item.cp = my.name
    endif
  endnew
endfunction

for functions.function as curFunction
 #generate the constants for each function
 curFunction.handleName = "AMPI_$(curFunction.name)_AdjointHandle"
 curFunction.asyncHandleName = "AMPI_$(curFunction.name)_AsyncHandle"
 if(!defined(curFunction.mpiName))
  curFunction.mpiName = "MPI_$(curFunction.name)"
 endif

 if(!defined(curFunction.type))
  curFunction.type = "int"
 endif

 #echo curFunction.name
 # mark all orignal arguments as args
 for curFunction. as item
   item.arg = 1
 endfor
 #generate the names for the datatypes
 for curFunction.send
   send.typeName = "$(send.type:upper)"
 endfor
 for curFunction.recv
   recv.typeName = "$(recv.type:upper)"
 endfor

# build the definitions for the templates
 curFunction.tplDef = ""
 curFunction.tplArg = ""
 curFunction.tplEmpty = ""
 for curFunction.type
   type.tplName = "$(type.name:upper)"
   curFunction.tplDef += "typename $(type.tplName)"
   curFunction.tplArg += "$(type.tplName)"
   curFunction.tplEmpty += "EmptyDataType"

   comma = last()?? "" ? ", "
   curFunction.tplDef += comma
   curFunction.tplArg += comma
   curFunction.tplEmpty += comma
 endfor

# build the AMPI names for all arguments
 for curFunction. as item
   item.taType = modifyTypeName(item.type)
 endfor

#build the argument lists and the list for the handles
 curFunction.argRev = ""
 for curFunction. as item where defined(item.arg)
   constMod = generateConst(item)
   if(name(item) =  "recv" | name(item) =  "send")
     if(defined(item.displs))
       curFunction.argRev += "h->$(item.name)Adjoints, h->$(item.name)Count, h->$(item.name)Displs"    # append adjoint and primal buffer and the byte size
     else
       curFunction.argRev += "h->$(item.name)Adjoints, h->$(item.name)Count"    # append adjoint and primal buffer and the byte size
     endif
   elsif(name(item) = "request")
     curFunction.argRev += "&h->$(item.name)Reverse"
   elsif(name(item) = "status")
     curFunction.argRev += "&$(item.name)"   # status is not stored
   elsif(name(item) = "message")
     curFunction.argRev += "&h->$(item.name)"   # directly stored
   else
     curFunction.argRev += "h->$(item.name)"
   endif
   comma = last()?? "" ? ", "
   curFunction.argRev += comma
 endfor

 new curFunction.primalHandle as handle
   define handle.noarg = 1
 endnew
 new curFunction.reverseHandle as handle
   define handle.noarg = 1
 endnew
 for curFunction. as item where defined(item.arg)
   constMod = generateConst(item)
   if(name(item) =  "recv" | name(item) =  "send")

     addHandleData(curFunction->primalHandle, 1, "", "$(item.name)", "$(constMod) typename $(item.typeName)::Type*")
     addHandleData(curFunction->primalHandle, 1, "", "$(item.name)Mod", "typename $(item.typeName)::ModifiedType*")
     addHandleData(curFunction->reverseHandle, 0, "", "$(item.name)TotalSize", "int")
     addHandleData(curFunction->reverseHandle, 0, "$(item.type)->getADTool().deleteIndexTypeBuffer($(item.name)Indices);", "$(item.name)Indices", "typename $(item.typeName)::IndexType*")
     addHandleData(curFunction->reverseHandle, 0, "$(item.type)->getADTool().deletePassiveTypeBuffer($(item.name)Primals);", "$(item.name)Primals", "typename $(item.typeName)::PassiveType*")
     if(name(item) =  "recv")
       addHandleData(curFunction->reverseHandle, 0, "$(item.type)->getADTool().deletePassiveTypeBuffer($(item.name)OldPrimals);", "$(item.name)OldPrimals", "typename $(item.typeName)::PassiveType*")
     endif
     addHandleData(curFunction->reverseHandle, 0, "", "$(item.name)Adjoints", "/* required for async */ typename $(item.typeName)::AdjointType*")
     if(defined(item.displs))
       addHandleData(curFunction->reverseHandle, 0, "delete [] $(item.name)Count;", "$(item.name)Count", "int*")
       addHandleData(curFunction->reverseHandle, 0, "delete [] $(item.name)Displs;", "$(item.name)Displs", "int*")
       addHandleData(curFunction->primalHandle, 1, "", "$(item.displs)Mod", "const int*")
     else
       addHandleData(curFunction->reverseHandle, 0, "", "$(item.name)Count", "int")
     endif
   elsif(name(item) = "request")
     addHandleData(curFunction->primalHandle, 0, "", "$(item.name)", "$(item.taType)")
     addHandleData(curFunction->reverseHandle, 0, "", "$(item.name)Reverse", "AMPI_Request")
   elsif(name(item) = "type")
     addHandleData(curFunction->primalHandle, 1, "", "$(item.name)", "$(constMod) $(item.tplName)*")
     addHandleData(curFunction->reverseHandle, 1, "", "$(item.name)", "$(constMod) $(item.tplName)*")
   elsif(name(item) = "status")
     # status is not stored
   elsif(name(item) = "message")
     addHandleData(curFunction->primalHandle, 1, "", "$(item.name)", "$(constMod) AMPI_Message*")
     addHandleData(curFunction->reverseHandle, 1, "", "$(item.name)", "$(constMod) AMPI_Message", "*$(item.name)")
   else
     # add other items to both handles
     addHandleData(curFunction->primalHandle, 1, "", "$(item.name)", "$(constMod) $(item.taType)")
     addHandleData(curFunction->reverseHandle, 1, "", "$(item.name)", "$(constMod) $(item.taType)")
   endif
 endfor
 # also add the async handle to the primal handle
 addHandleData(curFunction->primalHandle, 1, "", "h", "$(curFunction.handleName)<$(curFunction.tplArg)>*")

#build the argument lists and the list for the handles
 curFunction.argDef = ""
 for curFunction. as item where defined(item.arg)
   constMod = generateConst(item)

   curFunction.argDef +=   constMod # prepend the const modifier
   if(name(item) =  "recv" | name(item) =  "send")
     curFunction.argDef += "typename $(item.typeName)::Type* $(item.name)"  #append '::Type' to the typename
   elsif(name(item) = "type")
     curFunction.argDef += "$(item.tplName)* $(item.name)"
   elsif(name(item) = "status")
     curFunction.argDef += "$(item.taType)* $(item.name)"
   elsif(name(item) = "message")
     curFunction.argDef += "AMPI_Message* $(item.name)"
   else
     curFunction.argDef += "$(item.taType) $(item.name)"
   endif

   comma = last()?? "" ? ", "
   curFunction.argDef += comma
 endfor

#build the argument list for the regular call
 curFunction.argReg = ""
 for curFunction. as item where defined(item.arg)
   if(name(item) = "type")
     curFunction.argReg += "$(item.name)->getMpiType()"    # get the regular mpi type
   elsif(name(item) = "operator")
     curFunction.argReg += "convOp.primalFunction"    # get the regular mpi type
   elsif(name(item) = "request")
     if(defined(item.noptr))
       curFunction.argReg += "$(item.name).request"
     else
       curFunction.argReg += "&$(item.name)->request"
     endif
   elsif(name(item) = "message")
     curFunction.argReg += "&$(item.name)->message"
   else
     curFunction.argReg += "$(item.name)"
   endif
   curFunction.argReg += last()?? "" ? ", "  # append the seperator if neede
 endfor

#build the argument list for the call with modified items
 curFunction.argArg = ""
 for curFunction. as item where defined(item.arg)
   if(name(item) =  "recv" | name(item) =  "send")
     curFunction.argArg += "$(item.name)Mod"
   elsif(name(item) = "type")
     curFunction.argArg += "$(item.name)->getModifiedMpiType()"    # get the regular mpi type
   elsif(name(item) = "operator")
     curFunction.argArg += "convOp.modifiedPrimalFunction"
   elsif(name(item) = "displs")
     curFunction.argArg += "$(item.name)Mod"
   elsif(name(item) = "request")
     if(defined(item.noptr))
       curFunction.argArg += "$(item.name).request"
     else
       curFunction.argArg += "&$(item.name)->request"
     endif
   elsif(name(item) = "message")
     curFunction.argArg += "&$(item.name)->message"
   else
     curFunction.argArg += "$(item.name)"
   endif
   curFunction.argArg += last()?? "" ? ", "  # append the seperator if neede
 endfor

# add properties to the buffers
 for curFunction. as item where defined(item.arg)

   if(name(item) =  "recv" | name(item) =  "send")
     item.rankCount = "1"
     if(defined(item.ranks) | defined(item.displs))
       item.rankCount = "getCommSize(comm)"
     endif

   endif
 endfor

 # link inplace buffers together
 for curFunction. as item where defined(item.arg)

   if(name(item) =  "recv" | name(item) =  "send")
     if(defined(item.inplace))
       for curFunction. as linkedItem where defined(linkedItem.arg)

         if(linkedItem.name = item.inplace)
           # found the buffer with the name so copy it to this buffer and create the link
           copy linkedItem to item as inplaceBuffer
         endif
       endfor
     endif
   endif
 endfor

 # special definitions for the type
 for curFunction.type as type
   # define the ad type that is used in this function
   curFunction.adType = "$(type.name)->getADTool()"

   # define the main type that is used in this function
   curFunction.mainType = "$(type.name)"
 endfor
endfor

function startRoot(buffer)
  if(defined(my.buffer.root))  # check if this buffer is only required on the root process
>      if($(my.buffer.root) == getCommRank(comm)) {
  endif
endfunction

function endRoot(buffer)
  if(defined(my.buffer.root))
>      }
  endif
endfunction

function startRootReverse(buffer)
  if(defined(my.buffer.root))  # check if this buffer is only required on the root process
>      if(h->$(my.buffer.root) == getCommRank(h->comm)) {
  endif
endfunction

function endRootReverse(buffer)
  if(defined(my.buffer.root))
>      }
  endif
endfunction


# createBufferAccessLogic
# @param[in] modifiedCheck  Adds a check if modifed buffers are required.
#                            0 -> no check
#                            1 -> add positive check (exectued if modified buffers are required)
#                           -1 -> add negative check (executed if no modified buffers are required)
function createBufferAccessLogic(buffer, modifiedCheck, access)
  startRoot(my.buffer)

  if(1 = my.modifiedCheck)
>   if($(my.buffer.type)->isModifiedBufferRequired()) {
  elsif(-1 = my.modifiedCheck)
>   if(!$(my.buffer.type)->isModifiedBufferRequired()) {
  endif

  # Check if this buffer can be an inplace buffer
  if(defined(my.buffer.inplace))
>   if(AMPI_IN_PLACE != $(my.buffer.name)) {
  endif

    generateLoop(my.buffer, my.access)

  # else for an inplece buffer
  if(defined(my.buffer.inplace))
>   } else {
      inplaceBuffer = my.buffer->inplaceBuffer
      generateInplaceLoop(my.buffer, inplaceBuffer, my.access)
>   }
  endif
  if(0 <> my.modifiedCheck)
>   }
  endif

  endRoot(my.buffer)
endfunction


function createBufferElementsComputation(buffer)
  if(defined(my.buffer.inplace))
>   if(AMPI_IN_PLACE != $(my.buffer.name)) {
  endif
# the buffer is defined
  if(defined(my.buffer.displs))
>   $(my.buffer.name)Elements = $(my.buffer.displs)TotalSize;
  elsif(defined(my.buffer.ranks))
>   $(my.buffer.name)Elements = $(my.buffer.count) * getCommSize($(my.buffer.ranks));
  else
>   $(my.buffer.name)Elements = $(my.buffer.count);
  endif
  if(defined(my.buffer.inplace))
    inplaceBuffer = my.buffer->inplaceBuffer
>   } else {

    # The buffer is an inplace buffer
    if(defined(inplaceBuffer.displs))
      if(defined(my.buffer.displs)) # both have the same layout so copy the total size
>       $(my.buffer.name)Elements = $(inplaceBuffer.displs)TotalSize;
      else  # buffer is a normal buffer so just get the size from the rank
>       $(my.buffer.name)Elements = $(inplaceBuffer.count)[getCommRank(comm)];
      endif
    elsif(defined(inplaceBuffer.ranks))
      if(defined(my.buffer.ranks)) # both have the same layout so copy the total size
>       $(my.buffer.name)Elements = $(inplaceBuffer.count) * getCommSize($(my.buffer.ranks));
      else # buffer is a normal buffer so just get the size from the rank
>       $(my.buffer.name)Elements = $(inplaceBuffer.count);
      endif
    else
>     $(my.buffer.name)Elements = $(inplaceBuffer.count);
    endif
>   }
  endif
endfunction

function createBufferReverseSetup(buffer, curFunction, isRecv)
> h->$(my.buffer.name)Adjoints = nullptr;
  startRootReverse(my.buffer)
    allMul = ""
    if(defined(my.buffer.all))
      allMul = "* getCommSize(h->$(my.buffer.all))"
    endif
>   h->$(my.curFunction.adType).createAdjointTypeBuffer(h->$(my.buffer.name)Adjoints, h->$(my.buffer.name)TotalSize $(allMul));
    if(1 = my.isRecv)
>     // Adjoint buffers are always linear in space so we can accesses them in one sweep
>     h->$(my.curFunction.adType).getAdjoints(h->$(my.buffer.name)Indices, h->$(my.buffer.name)Adjoints, h->$(my.buffer.name)TotalSize);
>
      if(defined(my.curFunction->operator))
>       convOp.preAdjointOperation(h->$(my.buffer.name)Adjoints, h->$(my.buffer.name)Primals, h->$(my.buffer.name)Count);
      endif
    endif
  endRootReverse(my.buffer)
endfunction

function createBufferReverseCleanup(buffer, curFunction, isSend)
  startRootReverse(my.buffer)
    if(1 = my.isSend)
      if(defined(my.buffer.all))
>       h->$(my.curFunction.adType).combineAdjoints(h->$(my.buffer.name)Adjoints, h->$(my.buffer.name)TotalSize, getCommSize(h->$(my.buffer.all)));
      endif
      if(defined(my.curFunction->operator))
>       // the primals of the recive buffer are always given to the function. The operator should ignore them if not needed.
>       // The wrapper functions make sure that for operators that need the primals an all* action is perfomed (e.g. Allreduce instead of Reduce)
>       convOp.postAdjointOperation(h->$(my.buffer.name)Adjoints, h->$(my.buffer.name)Primals, h->$(my.curFunction->recv.name)Primals, h->$(my.buffer.name)TotalSize);
      endif
>     // Adjoint buffers are always linear in space so they can be accessed in one sweep
>     h->$(my.curFunction.adType).updateAdjoints(h->$(my.buffer.name)Indices, h->$(my.buffer.name)Adjoints, h->$(my.buffer.name)TotalSize);
    endif
>   h->$(my.curFunction.adType).deleteAdjointTypeBuffer(h->$(my.buffer.name)Adjoints);
  endRootReverse(my.buffer)
endfunction

# define function for primal restore
function createPrimalRestore(buffer, curFunction, elementName)
  startRootReverse(my.buffer)
>   h->$(my.curFunction.adType).setReverseValues(h->$(my.buffer.name)Indices, h->$(my.buffer.name)$(my.elementName), h->$(my.buffer.name)TotalSize);
  endRootReverse(my.buffer)
endfunction

# define function for primal extraction
function createPrimalExtraction(buffer, curFunction, elementName)
  startRoot(my.buffer)
>   $(my.curFunction.adType).createPassiveTypeBuffer(h->$(my.Buffer.name)$(my.elementName), h->$(my.buffer.name)TotalSize);
    createBufferAccessLogic(my.buffer, 0, "$type$->getValues($name$, $pos$, h->$(my.buffer.name)$(my.elementName), $startLinPos$, $curCount$);")
  endRoot(my.buffer)
endfunction

function outputStatement(statement, type, name, pos, linPos, startLinPos, count)
> $(string.replace(my.statement, "$type$|$(my.type),$name$|$(my.name),$pos$|$(my.pos),$linPos$|$(my.linPos),$startLinPos$|$(my.startLinPos),$curCount$|$(my.count)"))
endfunction

#create a loop around a statement
function generateLoop(buffer, statement)
  if(defined(my.buffer.displs))
>   for(int i = 0; i < getCommSize(comm); ++i) {
      pos = "$(my.buffer.displs)[i]"
      linPos = "$(my.buffer.displs)Mod[i]"
      curCount = "$(my.buffer.count)[i]"
      outputStatement(my.statement, my.buffer.type, my.buffer.name, pos, linPos, linPos, curCount)
>   }
  elsif(defined(my.buffer.ranks))
    outputStatement(my.statement, my.buffer.type, my.buffer.name, "0", "0", "0", "$(my.buffer.count) * getCommSize($(my.buffer.ranks))")
  else
    outputStatement(my.statement, my.buffer.type, my.buffer.name, "0", "0", "0", "$(my.buffer.count)")
  endif
endfunction

#create a loop around a statement
function generateInplaceLoop(buffer, inplaceBuffer, statement)
  if(defined(my.buffer.displs) | defined(my.buffer.ranks))
    # this buffer has a special layout so the other buffer must have the same layout
    generateLoop(my.inplaceBuffer, my.statement)
  elsif(defined(my.inplaceBuffer.displs))
>   {
      # TODO: add marker for displacement buffers, that indicates the communicator
>     const int rank = getCommRank(comm);
      pos = "$(my.inplaceBuffer.displs)[rank]"
      linPos = "$(my.inplaceBuffer.displs)Mod[rank]"
      curCount = "$(my.inplaceBuffer.count)[rank]"
      outputStatement(my.statement, my.inplaceBuffer.type, my.inplaceBuffer.name, pos, linPos, "0", curCount)
>   }
  elsif(defined(my.inplaceBuffer.ranks))
     pos = "$(my.inplaceBuffer.count) * getCommRank($(my.inplaceBuffer.ranks))"
     curCount = "$(my.inplaceBuffer.count)"
    outputStatement(my.statement, my.inplaceBuffer.type, my.inplaceBuffer.name, pos, pos, "0", curCount)
  else
    generateLoop(my.inplaceBuffer, my.statement)
  endif
endfunction

function packHandle(handle, name)
# pack the arguments
  for my.handle. as item
    if 1 = item.pack
>     $(my.name)->$(item.name) = $(item.cp);
    endif
  endfor
endfunction

function addPrimalAsyncSplit(curFunction)
  if(defined(my.curFunction.async))
>
>      $(my.curFunction.asyncHandleName)<$(my.curFunction.tplArg)>* asyncHandle = new $(my.curFunction.asyncHandleName)<$(my.curFunction.tplArg)>();
       packHandle(my.curFunction->primalHandle, "asyncHandle")
>      $(my.curFunction.async)->handle = asyncHandle;
>      $(my.curFunction.async)->func = (ContinueFunction)AMPI_$(my.curFunction.name)_finish<$(my.curFunction.tplArg)>;
>
>      // create adjoint wait
>      if(nullptr != h) {
>        WaitHandle* waitH = new WaitHandle((ContinueFunction)AMPI_$(my.curFunction.name)_b_finish<$(my.curFunction.tplArg)>, h);
>        $(my.curFunction.adType).addToolAction(waitH);
>      }
>    }
>
>    return rStatus;
>  }
>
>  template<$(my.curFunction.tplDef)>
>  int AMPI_$(my.curFunction.name)_finish(HandleBase* handle) {
>    int rStatus = 0;
>
>    $(my.curFunction.asyncHandleName)<$(my.curFunction.tplArg)>* asyncHandle = static_cast<$(my.curFunction.asyncHandleName)<$(my.curFunction.tplArg)>*>(handle);
#    unpack the arguments (buffers are accessed directly)
     for my.curFunction->primalHandle. as item
>      $(item.type) $(item.name) = asyncHandle->$(item.name);
     endfor
     for my.curFunction->primalHandle. as item
>      MEDI_UNUSED($(item.name)); // Unused generated to ignore warnings
     endfor
>
>    delete asyncHandle;
>
>    if($(my.curFunction.adType).isActiveType()) {
>
       for my.curFunction.operator
>        AMPI_Op convOp = $(my.curFunction.adType).convertOperator($(operator.name));
       endfor

  endif
endfunction

function addReverseAsyncSplit(curFunction)
  if(defined(my.curFunction.async))
>  }
>
>  template<$(my.curFunction.tplDef)>
>  void AMPI_$(my.curFunction.name)_b_finish(HandleBase* handle) {
>
>    $(my.curFunction.handleName)<$(my.curFunction.tplArg)>* h = static_cast<$(my.curFunction.handleName)<$(my.curFunction.tplArg)>*>(handle);
>    MPI_Wait(&h->$(my.curFunction.async)Reverse.request, MPI_STATUS_IGNORE);
>
     for my.curFunction.operator
>      AMPI_Op convOp = h->$(my.curFunction.adType).convertOperator(h->$(operator.name));
     endfor
  endif
endfunction

.endtemplate
.output "$(switches.arg1)"
.literal from "templates/medi/license_c.header"

#pragma once

#include "../../include/medi/ampi/async.hpp"
#include "../../include/medi/ampi/message.hpp"
#include "../../include/medi/ampi/reverseFunctions.hpp"
#include "../../include/medi/displacementTools.hpp"
#include "../../include/medi/mpiTools.h"

/**
 * @brief Global namespace for MeDiPack - Message Differentiation Package
 */
namespace medi {
.for functions.function as curFunction where curFunction.mediHandle ?= "transform"
. startVersionGuard(curFunction)
.
.- create the struct for the data store
  template<$(curFunction.tplDef)>
  struct $(curFunction.handleName) : public HandleBase {
. for curFunction->reverseHandle. as item
    $(item.type) $(item.name);
. endfor

    ~$(curFunction.handleName) () {
.     for curFunction->reverseHandle. as item
.       if("" <> item.del)
          if(nullptr != $(item.name)) {
            $(item.del)
            $(item.name) = nullptr;
          }
.       endif
.     endfor
    }
  };

. if(defined(curFunction.async))
    template<$(curFunction.tplDef)>
    struct $(curFunction.asyncHandleName) : public HandleBase {
.   for curFunction->primalHandle. as item
      $(item.type) $(item.name);
.   endfor
    };
. endif

.- create the reverse function
  template<$(curFunction.tplDef)>
  void AMPI_$(curFunction.name)_b(HandleBase* handle) {
    $(curFunction.handleName)<$(curFunction.tplArg)>* h = static_cast<$(curFunction.handleName)<$(curFunction.tplArg)>*>(handle);

.   for curFunction.status
      $(status.type) $(status.name);
.   endfor
.
.   if(defined(curFunction->operator))
      AMPI_Op convOp = h->$(curFunction.adType).convertOperator(h->$(curFunction->operator.name));
.   endif
.   for curFunction.recv
.     createBufferReverseSetup(recv, curFunction, 1)
      if(h->$(curFunction.adType).isOldPrimalsRequired()) {
.       createPrimalRestore(recv, curFunction, "OldPrimals")
      }
.   endfor
.
.   for curFunction.send
.     createBufferReverseSetup(send, curFunction, 0)
.   endfor

    AMPI_$(curFunction.name)_adj<$(curFunction.tplArg)>($(curFunction.argRev));

.   addReverseAsyncSplit(curFunction)
.   for curFunction.send
.     createBufferReverseCleanup(send, curFunction, 1)
.   endfor
.
.   for curFunction.recv
.     createBufferReverseCleanup(recv, curFunction, 0)
.   endfor
  }

.--- predefine the async function
. if(defined(curFunction.async))
    template<$(curFunction.tplDef)>
    int AMPI_$(curFunction.name)_finish(HandleBase* handle);
. endif
.
.-------------------------------------------------------------------------
.- create the primal function
.-------------------------------------------------------------------------
  template<$(curFunction.tplDef)>
  int AMPI_$(curFunction.name)($(curFunction.argDef)) {
    int rStatus;
.     if(defined(curFunction->operator))
        AMPI_Op convOp = $(curFunction.adType).convertOperator($(curFunction->operator.name));
.     endif

    if(!$(curFunction.adType).isActiveType()) {
      // call the regular function if the type is not active
      rStatus = $(curFunction.mpiName)($(curFunction.argReg));
    } else {

      // the type is an AD type so handle the buffers
      $(curFunction.handleName)<$(curFunction.tplArg)>* h = nullptr;
      // the handle is created if a reverse action should be recorded, h != nullptr => tape is active
      if($(curFunction.adType).isHandleRequired()) {
        h = new $(curFunction.handleName)<$(curFunction.tplArg)>();
      }
      $(curFunction.adType).startAssembly(h);
.
.-    create the linear displacements
.     for curFunction.displs as item
        MEDI_OPTIONAL_CONST int* $(item.name)Mod = $(item.name);
        int $(item.name)TotalSize = 0;
        if(nullptr != $(item.name)) {
          $(item.name)TotalSize = computeDisplacementsTotalSize($(item.counts), getCommSize($(item.ranks)));
          if($(curFunction.mainType)->isModifiedBufferRequired()) {
            $(item.name)Mod = createLinearDisplacements($(item.counts), getCommSize($(item.ranks)));
          }
        }
.     endfor
.
.-    create the buffers
.     for curFunction. as item where defined(item.arg)
.       if(name(item) =  "recv" | name(item) =  "send")
          typename $(item.typeName)::ModifiedType* $(item.name)Mod = nullptr;
          int $(item.name)Elements = 0;

.         startRoot(item)
            // compute the total size of the buffer
.           createBufferElementsComputation(item)

.           inplace = ""
.           if(defined(item.inplace))
.             inplace = " && !(AMPI_IN_PLACE == $(item.name))"
.           endif
            if($(item.type)->isModifiedBufferRequired() $(inplace)) {
              $(item.type)->createModifiedTypeBuffer($(item.name)Mod, $(item.name)Elements);
            } else {
              $(item.name)Mod = reinterpret_cast<typename $(item.typeName)::ModifiedType*>(const_cast<typename $(item.typeName)::Type*>($(item.name)));
            }
.         endRoot(item)
.       endif
.     endfor

.-    copy the data into the modified buffers
.     for curFunction. as item where defined(item.arg)
.       if(name(item) = "send")
.         createBufferAccessLogic(item, 1, "$type$->copyIntoModifiedBuffer($name$, $pos$, $name$Mod, $linPos$, $curCount$);")
.       endif
.     endfor

      if(nullptr != h) {
        // gather the information for the reverse sweep

        // create the index buffers
.       for curFunction. as item where defined(item.arg)
.         if(name(item) =  "send" | name(item) =  "recv")
.           startRoot(item)
.             if(defined(item.inplace))
                if(AMPI_IN_PLACE != $(item.name)) {
.             endif
.             if(defined(item.displs))
                createLinearIndexDisplacements(h->$(item.name)Count, h->$(item.name)Displs, $(item.count), getCommSize(comm), $(item.type));
.             else
                h->$(item.name)Count = $(item.type)->computeActiveElements($(item.count));
.             endif
.             if(defined(item.inplace))
.               inplaceBuffer = item->inplaceBuffer
                } else {
.                if(defined(inplaceBuffer.displs))
.                  if(defined(item.displs))
                     createLinearIndexDisplacements(h->$(item.name)Count, h->$(item.name)Displs, $(inplaceBuffer.count), getCommSize(comm), $(inplaceBuffer.type));
.                  else
                     h->$(item.name)Count = $(inplaceBuffer.type)->computeActiveElements($(inplaceBuffer.count)[getCommRank(comm)]);
.                  endif
.                else
                   h->$(item.name)Count = $(inplaceBuffer.type)->computeActiveElements($(inplaceBuffer.count));
.                endif
                }
.             endif
              h->$(item.name)TotalSize = $(item.type)->computeActiveElements($(item.name)Elements);
              $(curFunction.adType).createIndexTypeBuffer(h->$(item.name)Indices, h->$(item.name)TotalSize);
.           endRoot(item)
.         endif
.       endfor

.-      if there is an operator in the arguments the primals might need to be extracted
.       if(defined(curFunction->operator))
          // extract the primal values for the operator if required
          if(convOp.requiresPrimal) {
.           for curFunction.send
.             createPrimalExtraction(send, curFunction, "Primals")
.           endfor
          }
.       endif

.       for curFunction.recv
          // extract the old primal values from the recv buffer if the AD tool
          // needs the primal values reset
          if($(curFunction.adType).isOldPrimalsRequired()) {
.           createPrimalExtraction(recv, curFunction, "OldPrimals")
          }
.       endfor


.       for curFunction. as item where defined(item.arg)
.         if(name(item) =  "send")
.-          The index buffer is always the one from the buffer we are currently handling
.           createBufferAccessLogic(item, 0, "$type$->getIndices($name$, $pos$, h->$(item.name)Indices, $startLinPos$, $curCount$);")
.         endif
.       endfor

        // pack all the variables in the handle
        h->func = AMPI_$(curFunction.name)_b<$(curFunction.tplArg)>;
.-- pack the arguments (buffers are packed in buffer methods)
.       packHandle(curFunction->reverseHandle, "h")
      }

.     for curFunction. as item where defined(item.arg)
.       if(name(item) =  "recv")
.         createBufferAccessLogic(item, -1, "$type$->clearIndices($name$, $pos$, $curCount$);")
.       endif
.     endfor

      rStatus = $(curFunction.mpiName)($(curFunction.argArg));
.
.     addPrimalAsyncSplit(curFunction)
.
      $(curFunction.adType).addToolAction(h);

.-    copy the data from the modified buffers
.     for curFunction. as item where defined(item.arg)
.       if(name(item) =  "recv")
.         createBufferAccessLogic(item, 1, "$type$->copyFromModifiedBuffer($name$, $pos$, $name$Mod, $linPos$, $curCount$);")
.       endif
.     endfor

      if(nullptr != h) {
        // handle the recv buffers
.       for curFunction. as item where defined(item.arg)
.         if(name(item) =  "recv")
.-          The index buffer is always the one from the buffer we are currently handling
.           createBufferAccessLogic(item, 0, "$type$->registerValue($name$, $pos$, h->$(item.name)Indices, h->$(item.name)OldPrimals, $startLinPos$, $curCount$);")
.         endif
.       endfor
      }
.
.     if(defined(curFunction->operator))
        // extract the primal values for the operator if required
        if(nullptr != h && convOp.requiresPrimal) {
.       for curFunction.recv
.         createPrimalExtraction(recv, curFunction, "Primals")
.       endfor
        }
.     endif

      $(curFunction.adType).stopAssembly(h);
.
.-    delete the linear displacements
.     for curFunction.displs as item
        if($(curFunction.mainType)->isModifiedBufferRequired()) {
          delete [] $(item.name)Mod;
        }
.     endfor

.-    delete the buffers
.     for curFunction. as item where defined(item.arg)
.       if(name(item) =  "recv" | name(item) =  "send")
.         startRoot(item)
.           inplace = ""
.           if(defined(item.inplace))
.             inplace = " && !(AMPI_IN_PLACE == $(item.name))"
.           endif
            if($(item.type)->isModifiedBufferRequired() $(inplace)) {
              $(item.type)->deleteModifiedTypeBuffer($(item.name)Mod);
            }
.         endRoot(item)
.       endif
.     endfor

      // handle is deleted by the AD tool
    }

    return rStatus;
  }

.
. endVersionGuard(curFunction)
.endfor

.for functions.function as curFunction where "default" = (curFunction.mediHandle?"default")
. startVersionGuard(curFunction)
.
. if("" <> curFunction.tplDef)
    template<$(curFunction.tplDef)>
. endif
  inline $(curFunction.type) AMPI_$(curFunction.name)($(curFunction.argDef)) {
.   if(defined(curFunction->operator))
      AMPI_Op convOp = op;
.   endif
    return MPI_$(curFunction.name)($(curFunction.argArg));
  }

. endVersionGuard(curFunction)
.endfor

.for functions.function as curFunction where "forward" = (curFunction.mediHandle?"default")
. startVersionGuard(curFunction)
.
  #define AMPI_$(curFunction.name) MPI_$(curFunction.name)
.
. endVersionGuard(curFunction)
.endfor


.- All functions with curFunction.mediHandle equal to 'disable' or 'handled' are ignored
}
