%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%                                                                              %
% SU2 configuration file                                                       %
% Case description: _________________________________________________________  %
% Author: ___________________________________________________________________  %
% Institution: ______________________________________________________________  %
% Date: __________                                                             %
% File Version 6.0.0 "Falcon"                                                  %
%                                                                              %
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%

% ------------- DIRECT, ADJOINT, AND LINEARIZED PROBLEM DEFINITION ------------%
%
% Physical governing equations (EULER, NAVIER_STOKES,
%                               WAVE_EQUATION, HEAT_EQUATION, FEM_ELASTICITY,
%                               POISSON_EQUATION)
PHYSICAL_PROBLEM= EULER
%
% Specify turbulence model (NONE, SA, SA_NEG, SST, SA_E, SA_COMP, SA_E_COMP)
KIND_TURB_MODEL= NONE
%
% Specify Hybrid RANS/LES model (SA_DES, SA_DDES, SA_ZDES, SA_EDDES)
HYBRID_RANSLES= SA_DDES
%
% DES Constant (0.65)
DES_CONST= 0.65
%
% Mathematical problem (DIRECT, CONTINUOUS_ADJOINT, DISCRETE_ADJOINT)
MATH_PROBLEM= DIRECT
%
% Regime type (COMPRESSIBLE, INCOMPRESSIBLE)
REGIME_TYPE= COMPRESSIBLE
%
% Axisymmetric simulation, only compressible flows (NO, YES)
AXISYMMETRIC= NO
%
% Restart solution (NO, YES)
RESTART_SOL= NO
%
% Discard the data storaged in the solution and geometry files
% e.g. AOA, dCL/dAoA, dCD/dCL, iter, etc.
% Note that AoA in the solution and geometry files is critical
% to aero design using AoA as a variable. (NO, YES)
DISCARD_INFILES= NO
%
% System of measurements (SI, US)
% International system of units (SI): ( meters, kilograms, Kelvins,
%                                       Newtons = kg m/s^2, Pascals = N/m^2, 
%                                       Density = kg/m^3, Speed = m/s,
%                                       Equiv. Area = m^2 )
% United States customary units (US): ( inches, slug, Rankines, lbf = slug ft/s^2, 
%                                       psf = lbf/ft^2, Density = slug/ft^3, 
%                                       Speed = ft/s, Equiv. Area = ft^2 )
SYSTEM_MEASUREMENTS= SI

% ------------------------------- DES Parameters ------------------------------%
%
% Specify Hybrid RANS/LES model (SA_DES, SA_DDES, SA_ZDES, SA_EDDES)
HYBRID_RANSLES= SA_DDES
%
% DES Constant (0.65)
DES_CONST= 0.65

% -------------------- COMPRESSIBLE FREE-STREAM DEFINITION --------------------%
%
% Mach number (non-dimensional, based on the free-stream values)
MACH_NUMBER= 0.8
%
% Angle of attack (degrees, only for compressible flows)
AOA= 1.25
%
% Side-slip angle (degrees, only for compressible flows)
SIDESLIP_ANGLE= 0.0
%
% Init option to choose between Reynolds (default) or thermodynamics quantities
% for initializing the solution (REYNOLDS, TD_CONDITIONS)
INIT_OPTION= REYNOLDS
%
% Free-stream option to choose between density and temperature (default) for
% initializing the solution (TEMPERATURE_FS, DENSITY_FS)
FREESTREAM_OPTION= TEMPERATURE_FS
%
% Free-stream pressure (101325.0 N/m^2, 2116.216 psf by default)
FREESTREAM_PRESSURE= 101325.0
%
% Free-stream temperature (288.15 K, 518.67 R by default)
FREESTREAM_TEMPERATURE= 288.15
%
% Reynolds number (non-dimensional, based on the free-stream values)
REYNOLDS_NUMBER= 6.5E6
%
% Reynolds length (1 m, 1 inch by default)
REYNOLDS_LENGTH= 1.0

% -------------------- INCOMPRESSIBLE FREE-STREAM DEFINITION ------------------%
%
% Free-stream density (1.2886 Kg/m^3, 0.0025 slug/ft^3 by default)
FREESTREAM_DENSITY= 1.2886
%
% Free-stream velocity (1.0 m/s, 1.0 ft/s by default)
FREESTREAM_VELOCITY= ( 1.0, 0.00, 0.00 )
%
% Free-stream viscosity (1.853E-5 N s/m^2, 3.87E-7 lbf s/ft^2 by default)
FREESTREAM_VISCOSITY= 1.853E-5

% ----------------------------- CL DRIVER DEFINITION ---------------------------%
%
% Activate fixed lift mode (specify a CL instead of AoA, NO/YES)
FIXED_CL_MODE= NO
%
% Target coefficient of lift for fixed lift mode (0.80 by default)
TARGET_CL= 0.80
%
% Estimation of dCL/dAlpha (0.2 per degree by default)
DCL_DALPHA= 0.2
%
% Number of times the AoA is updated in a fix CL problem (5 by default)
UPDATE_ALPHA= 5
%
% Number of iterations to evaluate dCL_dAlpha by using finite differences (500 by default)
ITER_DCL_DALPHA= 500

% ---------------------- REFERENCE VALUE DEFINITION ---------------------------%
%
% Reference origin for moment computation (m or in)
REF_ORIGIN_MOMENT_X = 0.25
REF_ORIGIN_MOMENT_Y = 0.00
REF_ORIGIN_MOMENT_Z = 0.00
%
% Reference length for moment non-dimensional coefficients (m or in)
REF_LENGTH= 1.0
%
% Reference area for non-dimensional force coefficients (0 implies automatic
% calculation) (m^2 or in^2)
REF_AREA= 1.0
%
% Aircraft semi-span (0 implies automatic calculation) (m or in)
SEMI_SPAN= 0.0
%
% Flow non-dimensionalization (DIMENSIONAL, FREESTREAM_PRESS_EQ_ONE,
%                              FREESTREAM_VEL_EQ_MACH, FREESTREAM_VEL_EQ_ONE)
REF_DIMENSIONALIZATION= DIMENSIONAL

% ---- IDEAL GAS, POLYTROPIC, VAN DER WAALS AND PENG ROBINSON CONSTANTS -------%
%
% Different gas model (STANDARD_AIR, IDEAL_GAS, VW_GAS, PR_GAS)
FLUID_MODEL= STANDARD_AIR
%
% Ratio of specific heats (1.4 default and the value is hardcoded
%                          for the model STANDARD_AIR)
GAMMA_VALUE= 1.4
%
% Specific gas constant (287.058 J/kg*K default and this value is hardcoded
%                        for the model STANDARD_AIR)
GAS_CONSTANT= 287.058
%
% Critical Temperature (131.00 K by default)
CRITICAL_TEMPERATURE= 131.00
%
% Critical Pressure (3588550.0 N/m^2 by default)
CRITICAL_PRESSURE= 3588550.0
%
% Acentri factor (0.035 (air))
ACENTRIC_FACTOR= 0.035

% --------------------------- VISCOSITY MODEL ---------------------------------%
%
% Viscosity model (SUTHERLAND, CONSTANT_VISCOSITY).
VISCOSITY_MODEL= SUTHERLAND
%
% Molecular Viscosity that would be constant (1.716E-5 by default)
MU_CONSTANT= 1.716E-5
%
% Sutherland Viscosity Ref (1.716E-5 default value for AIR SI)
MU_REF= 1.716E-5
%
% Sutherland Temperature Ref (273.15 K default value for AIR SI)
MU_T_REF= 273.15
%
% Sutherland constant (110.4 default value for AIR SI)
SUTHERLAND_CONSTANT= 110.4

% --------------------------- THERMAL CONDUCTIVITY MODEL ----------------------%
%
% Conductivity model (CONSTANT_CONDUCTIVITY, CONSTANT_PRANDTL).
CONDUCTIVITY_MODEL= CONSTANT_PRANDTL
%
% Molecular Thermal Conductivity that would be constant (0.0257 by default)
KT_CONSTANT= 0.0257

% ------------------------- UNSTEADY SIMULATION -------------------------------%
%
% Unsteady simulation (NO, TIME_STEPPING, DUAL_TIME_STEPPING-1ST_ORDER,
%                      DUAL_TIME_STEPPING-2ND_ORDER, HARMONIC_BALANCE)
UNSTEADY_SIMULATION= NO
%
% Time Step for dual time stepping simulations (s) -- Only used when UNST_CFL_NUMBER = 0.0
UNST_TIMESTEP= 0.0
%
% Total Physical Time for dual time stepping simulations (s)
UNST_TIME= 50.0
%
% Unsteady Courant-Friedrichs-Lewy number of the finest grid
UNST_CFL_NUMBER= 0.0
%
% Number of internal iterations (dual time method)
UNST_INT_ITER= 200
%
% Iteration number to begin unsteady restarts
UNST_RESTART_ITER= 0

% ----------------------- DYNAMIC MESH DEFINITION -----------------------------%
%
% Dynamic mesh simulation (NO, YES)
GRID_MOVEMENT= NO
%
% Type of dynamic mesh (NONE, RIGID_MOTION, DEFORMING, ROTATING_FRAME,
%                       MOVING_WALL, STEADY_TRANSLATION, FLUID_STRUCTURE,
%                       AEROELASTIC, ELASTICITY, EXTERNAL,
%                       AEROELASTIC_RIGID_MOTION, GUST)
GRID_MOVEMENT_KIND= DEFORMING
%
% Motion mach number (non-dimensional). Used for initializing a viscous flow
% with the Reynolds number and for computing force coeffs. with dynamic meshes.
MACH_MOTION= 0.8
%
% Moving wall boundary marker(s) (NONE = no marker, ignored for RIGID_MOTION)
MARKER_MOVING= ( NONE )
%
% Coordinates of the motion origin
MOTION_ORIGIN_X= 0.25
MOTION_ORIGIN_Y= 0.0
MOTION_ORIGIN_Z= 0.0
%
% Angular velocity vector (rad/s) about the motion origin
ROTATION_RATE_X = 0.0
ROTATION_RATE_Y = 0.0
ROTATION_RATE_Z = 0.0
%
% Pitching angular freq. (rad/s) about the motion origin
PITCHING_OMEGA_X= 0.0
PITCHING_OMEGA_Y= 0.0
PITCHING_OMEGA_Z= 106.69842
%
% Pitching amplitude (degrees) about the motion origin
PITCHING_AMPL_X= 0.0
PITCHING_AMPL_Y= 0.0
PITCHING_AMPL_Z= 1.01
%
% Pitching phase offset (degrees) about the motion origin
PITCHING_PHASE_X= 0.0
PITCHING_PHASE_Y= 0.0
PITCHING_PHASE_Z= 0.0
%
% Translational velocity (m/s or ft/s) in the x, y, & z directions
TRANSLATION_RATE_X = 0.0
TRANSLATION_RATE_Y = 0.0
TRANSLATION_RATE_Z = 0.0
%
% Plunging angular freq. (rad/s) in x, y, & z directions
PLUNGING_OMEGA_X= 0.0
PLUNGING_OMEGA_Y= 0.0
PLUNGING_OMEGA_Z= 0.0
%
% Plunging amplitude (m or ft) in x, y, & z directions
PLUNGING_AMPL_X= 0.0
PLUNGING_AMPL_Y= 0.0
PLUNGING_AMPL_Z= 0.0
%
% Move Motion Origin for marker moving (1 or 0)
MOVE_MOTION_ORIGIN = 0

% -------------- AEROELASTIC SIMULATION (Typical Section Model) ---------------%
%
% Activated by GRID_MOVEMENT_KIND option
%
% The flutter speed index (modifies the freestream condition in the solver)
FLUTTER_SPEED_INDEX = 0.6
%
% Natural frequency of the spring in the plunging direction (rad/s)
PLUNGE_NATURAL_FREQUENCY = 100
%
% Natural frequency of the spring in the pitching direction (rad/s)
PITCH_NATURAL_FREQUENCY = 100
%
% The airfoil mass ratio
AIRFOIL_MASS_RATIO = 60
%
% Distance in semichords by which the center of gravity lies behind
% the elastic axis
CG_LOCATION = 1.8
%
% The radius of gyration squared (expressed in semichords)
% of the typical section about the elastic axis
RADIUS_GYRATION_SQUARED = 3.48
%
% Solve the aeroelastic equations every given number of internal iterations
AEROELASTIC_ITER = 3

% --------------------------- GUST SIMULATION ---------------------------------%
%
% Apply a wind gust (NO, YES)
WIND_GUST = NO
%
% Type of gust (NONE, TOP_HAT, SINE, ONE_M_COSINE, VORTEX, EOG)
GUST_TYPE = NONE
%
% Direction of the gust (X_DIR or Y_DIR)
GUST_DIR = Y_DIR
%
% Gust wavelenght (meters)
GUST_WAVELENGTH= 10.0
%
% Number of gust periods
GUST_PERIODS= 1.0
%
% Gust amplitude (m/s)
GUST_AMPL= 10.0
%
% Time at which to begin the gust (sec)
GUST_BEGIN_TIME= 0.0
%
% Location at which the gust begins (meters) */
GUST_BEGIN_LOC= 0.0

% ------------------------ SUPERSONIC SIMULATION ------------------------------%
%
% Evaluate equivalent area on the Near-Field (NO, YES)
EQUIV_AREA= NO
%
% Integration limits of the equivalent area ( xmin, xmax, Dist_NearField )
EA_INT_LIMIT= ( 1.6, 2.9, 1.0 )
%
% Equivalent area scale factor ( EA should be ~ force based objective functions )
EA_SCALE_FACTOR= 1.0
%
% Fix an azimuthal line due to misalignments of the near-field
FIX_AZIMUTHAL_LINE= 90.0
%
% Drag weight in sonic boom Objective Function (from 0.0 to 1.0)
DRAG_IN_SONICBOOM= 0.0

% -------------------------- ENGINE SIMULATION --------------------------------%
%
% Highlite area to compute MFR (1 in2 by default)
HIGHLITE_AREA= 1.0
%
% Fan polytropic efficiency (1.0 by default)
FAN_POLY_EFF= 1.0
%
% Only half engine is in the computational grid (NO, YES)
ENGINE_HALF_MODEL= NO
%
% Damping factor for the engine inflow.
DAMP_ENGINE_INFLOW= 0.95
%
% Damping factor for the engine exhaust.
DAMP_ENGINE_EXHAUST= 0.95
%
% Engine nu factor (SA model).
ENGINE_NU_FACTOR= 3.0
%
% Actuator disk jump definition using ratio or difference (DIFFERENCE, RATIO)
ACTDISK_JUMP= DIFFERENCE
%
% Number of times BC Thrust is updated in a fix Net Thrust problem (5 by default)
UPDATE_BCTHRUST= 10
%
% Initial BC Thrust guess for POWER or D-T driver (4000.0 lbf by default)
INITIAL_BCTHRUST= 4000.0
%
% Initialization with a subsonic flow around the engine.
SUBSONIC_ENGINE= NO
%
% Axis of the cylinder that defines the subsonic region (A_X, A_Y, A_Z, B_X, B_Y, B_Z, Radius)
SUBSONIC_ENGINE_CYL= ( 0.0, 0.0, 0.0, 1.0, 0.0 , 0.0, 1.0 )
%
% Flow variables that define the subsonic region (Mach, Alpha, Beta, Pressure, Temperature)
SUBSONIC_ENGINE_VALUES= ( 0.4, 0.0, 0.0, 2116.216, 518.67 )

% --------------------- INVERSE DESIGN SIMULATION -----------------------------%
%
% Evaluate an inverse design problem using Cp (NO, YES)
INV_DESIGN_CP= NO
%
% Evaluate an inverse design problem using heat flux (NO, YES)
INV_DESIGN_HEATFLUX= NO

% ----------------------- BODY FORCE DEFINITION -------------------------------%
%
% Apply a body force as a source term (NO, YES)
BODY_FORCE= NO
%
% Vector of body force values (BodyForce_X, BodyForce_Y, BodyForce_Z)
BODY_FORCE_VECTOR= ( 0.0, 0.0, 0.0 )

% -------------------- BOUNDARY CONDITION DEFINITION --------------------------%
%
% Euler wall boundary marker(s) (NONE = no marker)
MARKER_EULER= ( airfoil )
%
% Navier-Stokes (no-slip), constant heat flux wall  marker(s) (NONE = no marker)
% Format: ( marker name, constant heat flux (J/m^2), ... )
MARKER_HEATFLUX= ( NONE )
%
% Navier-Stokes (no-slip), isothermal wall marker(s) (NONE = no marker)
% Format: ( marker name, constant wall temperature (K), ... )
MARKER_ISOTHERMAL= ( NONE )
%
% Far-field boundary marker(s) (NONE = no marker)
MARKER_FAR= ( farfield )
%
% Symmetry boundary marker(s) (NONE = no marker)
MARKER_SYM= ( NONE )
%
% Internal boundary marker(s) e.g. no boundary condition (NONE = no marker)
MARKER_INTERNAL= ( NONE )
%
% Near-Field boundary marker(s) (NONE = no marker)
MARKER_NEARFIELD= ( NONE )
%
% Zone interface boundary marker(s) (NONE = no marker)
MARKER_INTERFACE= ( NONE )
%
% Inlet boundary type (TOTAL_CONDITIONS, MASS_FLOW)
INLET_TYPE= TOTAL_CONDITIONS
%
% Inlet boundary marker(s) with the following formats (NONE = no marker)
% Total Conditions: (inlet marker, total temp, total pressure, flow_direction_x,
%           flow_direction_y, flow_direction_z, ... ) where flow_direction is
%           a unit vector.
% Mass Flow: (inlet marker, density, velocity magnitude, flow_direction_x,
%           flow_direction_y, flow_direction_z, ... ) where flow_direction is
%           a unit vector.
% Incompressible: (inlet marker, NULL, velocity magnitude, flow_direction_x,
%           flow_direction_y, flow_direction_z, ... ) where flow_direction is
%           a unit vector.
MARKER_INLET= ( NONE )
%
% Outlet boundary marker(s) (NONE = no marker)
% Format: ( outlet marker, back pressure (static), ... )
MARKER_OUTLET= ( NONE )
%
% Actuator disk boundary type (VARIABLES_JUMP, BC_THRUST,
%                              DRAG_MINUS_THRUST)
ACTDISK_TYPE= VARIABLES_JUMP
%
% Actuator disk boundary marker(s) with the following formats (NONE = no marker)
% Variables Jump: ( inlet face marker, outlet face marker,
%                   Takeoff pressure jump (psf), Takeoff temperature jump (R), Takeoff rev/min,
%                   Cruise  pressure jump (psf), Cruise temperature jump (R), Cruise rev/min )
% BC Thrust: ( inlet face marker, outlet face marker,
%              Takeoff BC thrust (lbs), 0.0, Takeoff rev/min,
%              Cruise BC thrust (lbs), 0.0, Cruise rev/min )
% Drag-Thrust: ( inlet face marker, outlet face marker,
%                Takeoff Drag-Thrust (lbs), 0.0, Takeoff rev/min,
%                Cruise Drag-Thrust (lbs), 0.0, Cruise rev/min )
MARKER_ACTDISK= ( NONE )
%
% Supersonic inlet boundary marker(s) (NONE = no marker)
% Format: (inlet marker, temperature, static pressure, velocity_x,
%           velocity_y, velocity_z, ... ), i.e. primitive variables specified.
MARKER_SUPERSONIC_INLET= ( NONE )
%
% Supersonic outlet boundary marker(s) (NONE = no marker)
MARKER_SUPERSONIC_OUTLET= ( NONE )
%
% Periodic boundary marker(s) (NONE = no marker)
% Format: ( periodic marker, donor marker, rotation_center_x, rotation_center_y,
% rotation_center_z, rotation_angle_x-axis, rotation_angle_y-axis,
% rotation_angle_z-axis, translation_x, translation_y, translation_z, ... )
MARKER_PERIODIC= ( NONE )
%
% Engine Inflow boundary type (FAN_FACE_MACH, FAN_FACE_PRESSURE, FAN_FACE_MDOT)
ENGINE_INFLOW_TYPE= FAN_FACE_MACH
%
% Engine inflow boundary marker(s) (NONE = no marker)
% Format: (engine inflow marker, fan face Mach, ... )
MARKER_ENGINE_INFLOW= ( NONE )
%
% Engine exhaust boundary marker(s) with the following formats (NONE = no marker) 
% Format: (engine exhaust marker, total nozzle temp, total nozzle pressure, ... )
MARKER_ENGINE_EXHAUST= ( NONE )
%
% Displacement boundary marker(s) (NONE = no marker)
% Format: ( displacement marker, displacement value normal to the surface, ... )
MARKER_NORMAL_DISPL= ( NONE )
%
% Load boundary marker(s) (NONE = no marker)
% Format: ( load marker, force value normal to the surface, ... )
MARKER_NORMAL_LOAD= ( NONE )
%
% Pressure boundary marker(s) (NONE = no marker)
% Format: ( pressure marker )
MARKER_PRESSURE= ( NONE )
%
% Neumann bounday marker(s) (NONE = no marker)
MARKER_NEUMANN= ( NONE )
%
% Dirichlet boundary marker(s) (NONE = no marker)
MARKER_DIRICHLET= ( NONE )
%
% Riemann boundary marker(s) (NONE = no marker)
% Format: (marker, data kind flag, list of data)
MARKER_RIEMANN= ( NONE )
%
% Shroud boundary marker(s) (NONE = no marker)
% Format: (marker)
% If the ROTATING_FRAME option is activated, this option force the velocity on the boundaries specified to 0.0
MARKER_SHROUD= (NONE)
%
% Interface (s) definition, identifies the surface shared by two different zones.
% The interface is defined by listing pairs of markers (one from each zone connected by the interface)
% Example:
%   Given an arbitrary number of zones (A, B, C, ...)
%   A and B share a surface, interface 1
%   A and C share a surface, interface 2
% Format: ( marker_A_on_interface_1, marker_B_on_interface_1, marker_A_on_interface_2, marker_C_on_interface_2, ... )
%
MARKER_ZONE_INTERFACE= ( NONE )
%
% Specifies the interface (s)
% The kind of interface is defined by listing pairs of markers (one from each zone connected by the interface)
% Example:
%   Given an arbitrary number of zones (A, B, C, ...)
%   A and B share a surface, interface 1
%   A and C share a surface, interface 2
% Format: ( marker_A_on_interface_1, marker_B_on_interface_1, marker_A_on_interface_2, marker_C_on_interface_2, ... )
%
MARKER_FLUID_INTERFACE= ( NONE )
%
% Kind of interface interpolation among different zones (NEAREST_NEIGHBOR, ISOPARAMETRIC, SLIDING_MESH)
KIND_INTERPOLATION= NEAREST_NEIGHBOR

%-------- INFLOW/OUTFLOW BOUNDARY CONDITIONS SPECIFIC FOR TURBOMACHINERY --------%
%
% Inflow and Outflow markers must be specified, for each blade (zone), following the natural groth of the machine (i.e, from the first blade to the last)
MARKER_TURBOMACHINERY= (INFLOW, OUTMIX, INMIX, OUTFLOW)
%
% Mixing-plane interface markers must be specified to activate the transfer of information between zones
MARKER_MIXINGPLANE_INTERFACE= (OUTMIX, INMIX)
%
% Giles boundary condition for inflow, outfolw and mixing-plane
% Format inlet:  ( marker, TOTAL_CONDITIONS_PT, Total Pressure , Total Temperature, Flow dir-norm, Flow dir-tang, Flow dir-span, under-relax-avg, under-relax-fourier)
% Format outlet: ( marker, STATIC_PRESSURE, Static Pressure value, -, -, -, -, under-relax-avg, under-relax-fourier)
% Format mixing-plane in and out: ( marker, MIXING_IN or MIXING_OUT, -, -, -, -, -, -, under-relax-avg, under-relax-fourier)
MARKER_GILES= (INFLOW, TOTAL_CONDITIONS_PT, 413.6E+03, 477.6, 1.0, 0.0, 0.0, 1.0, 0.0, OUTMIX, MIXING_OUT, 0.0, 0.0, 0.0, 0.0, 0.0, 0.3, 0.0, INMIX, MIXING_IN, 0.0, 0.0, 0.0, 0.0, 0.0, 0.3, 0.0, OUTFLOW, STATIC_PRESSURE_1D, 67.46E+03, 0.0, 0.0, 0.0, 0.0 , 1.0, 0.0)
%
% This option insert an extra under relaxation factor for the Giles BC at the hub and shroud (under relax factor applied, span percentage to under relax)
GILES_EXTRA_RELAXFACTOR= (0.05, 0.05)
%
% YES Non reflectivity activated, NO the Giles BC behaves as a normal 1D characteristic-based BC
SPATIAL_FOURIER= NO

%---------------------------- TURBOMACHINERY SIMULATION -----------------------------%
%
% Specify kind of architecture for each zone (AXIAL, CENTRIPETAL, CENTRIFUGAL, CENTRIPETAL_AXIAL, AXIAL_CENTRIFUGAL)
TURBOMACHINERY_KIND= CENTRIPETAL CENTRIPETAL_AXIAL
%
% Specify kind of interpolation for the mixing-plane (LINEAR_INTERPOLATION, NEAREST_SPAN, MATCHING)
MIXINGPLANE_INTERFACE_KIND= LINEAR_INTERPOLATION
%
% Specify option for turbulent mixing-plane (YES, NO) default NO
TURBULENT_MIXINGPLANE= YES
%
% Specify ramp option for Outlet pressure (YES, NO) default NO
RAMP_OUTLET_PRESSURE= NO
%
% Parameters of the outlet pressure ramp (starting outlet pressure, updating-iteration-frequency, total number of iteration for the ramp)
RAMP_OUTLET_PRESSURE_COEFF= (400000.0, 10.0, 500)
%
% Specify ramp option for rotating frame (YES, NO) default NO
RAMP_ROTATING_FRAME= YES
%
% Parameters of the rotating frame ramp (starting rotational speed, updating-iteration-frequency, total number of iteration for the ramp)
RAMP_ROTATING_FRAME_COEFF= (0.0, 39.0, 500)
%
% Specify Kind of average process for linearizing the Navier-Stokes equation at inflow and outflow BCs included at the mixing-plane interface
% (ALGEBRAIC, AREA, MASSSFLUX, MIXEDOUT) default AREA
AVERAGE_PROCESS_KIND= MIXEDOUT
%
% Specify Kind of average process for computing turbomachienry performance parameters
% (ALGEBRAIC, AREA, MASSSFLUX, MIXEDOUT) default AREA
PERFORMANCE_AVERAGE_PROCESS_KIND= MIXEDOUT
%
%Parameters of the Newton method for the MIXEDOUT average algorithm (under relaxation factor, tollerance, max number of iterations)
MIXEDOUT_COEFF= (1.0, 1.0E-05, 15)
%
% Limit of Mach number below which the mixedout algorithm is substituted with a AREA average algorithm to avoid numerical issues
AVERAGE_MACH_LIMIT= 0.05
%
% ------------------------ SURFACES IDENTIFICATION ----------------------------%
%
% Marker(s) of the surface in the surface flow solution file
MARKER_PLOTTING = ( airfoil )
%
% Marker(s) of the surface where the non-dimensional coefficients are evaluated.
MARKER_MONITORING = ( airfoil )
%
% Viscous wall markers for which wall functions must be applied. (NONE = no marker)
% Format: ( marker name, wall function type, ... )
MARKER_WALL_FUNCTIONS= ( airfoil, NO_WALL_FUNCTION )
%
% Marker(s) of the surface where custom thermal BC's are defined.
MARKER_PYTHON_CUSTOM = ( NONE )
%
% Marker(s) of the surface where obj. func. (design problem) will be evaluated
MARKER_DESIGNING = ( airfoil )
%
% Marker(s) of the surface that is going to be analyzed in detail (massflow, average pressure, distortion, etc)
MARKER_ANALYZE = ( airfoil )
%
% Method to compute the average value in MARKER_ANALYZE (AREA, MASSFLUX).
MARKER_ANALYZE_AVERAGE = MASSFLUX

% ------------- COMMON PARAMETERS DEFINING THE NUMERICAL METHOD ---------------%
%
% Numerical method for spatial gradients (GREEN_GAUSS, WEIGHTED_LEAST_SQUARES)
NUM_METHOD_GRAD= GREEN_GAUSS
%
% CFL number (initial value for the adaptive CFL number)
CFL_NUMBER= 10.0
%
% Adaptive CFL number (NO, YES)
CFL_ADAPT= NO
%
% Parameters of the adaptive CFL number (factor down, factor up, CFL min value,
%                                        CFL max value )
CFL_ADAPT_PARAM= ( 1.5, 0.5, 1.25, 50.0 )
%
% Maximum Delta Time in local time stepping simulations
MAX_DELTA_TIME= 1E6
%
% Runge-Kutta alpha coefficients
RK_ALPHA_COEFF= ( 0.66667, 0.66667, 1.000000 )
%
% Objective function in gradient evaluation   (DRAG, LIFT, SIDEFORCE, MOMENT_X,
%                                             MOMENT_Y, MOMENT_Z, EFFICIENCY,
%                                             EQUIVALENT_AREA, NEARFIELD_PRESSURE,
%                                             FORCE_X, FORCE_Y, FORCE_Z, THRUST,
%                                             TORQUE, TOTAL_HEATFLUX,
%                                             MAXIMUM_HEATFLUX, INVERSE_DESIGN_PRESSURE,
%                                             INVERSE_DESIGN_HEATFLUX, SURFACE_TOTAL_PRESSURE, 
%                                             SURFACE_MASSFLOW, SURFACE_STATIC_PRESSURE, SURFACE_MACH)
% For a weighted sum of objectives: separate by commas, add OBJECTIVE_WEIGHT and MARKER_MONITORING in matching order.
OBJECTIVE_FUNCTION= DRAG
%
% List of weighting values when using more than one OBJECTIVE_FUNCTION. Separate by commas and match with MARKER_MONITORING.
OBJECTIVE_WEIGHT = 1.0

% ----------- SLOPE LIMITER AND DISSIPATION SENSOR DEFINITION -----------------%
%
% Monotonic Upwind Scheme for Conservation Laws (TVD) in the flow equations.
%           Required for 2nd order upwind schemes (NO, YES)
MUSCL_FLOW= YES
%
% Slope limiter (NONE, VENKATAKRISHNAN, VENKATAKRISHNAN_WANG,
%                BARTH_JESPERSEN, VAN_ALBADA_EDGE)
SLOPE_LIMITER_FLOW= VENKATAKRISHNAN
%
% Monotonic Upwind Scheme for Conservation Laws (TVD) in the turbulence equations.
%           Required for 2nd order upwind schemes (NO, YES)
MUSCL_TURB= NO
%
% Slope limiter (NONE, VENKATAKRISHNAN, VENKATAKRISHNAN_WANG,
%                BARTH_JESPERSEN, VAN_ALBADA_EDGE)
SLOPE_LIMITER_TURB= VENKATAKRISHNAN
%
% Monotonic Upwind Scheme for Conservation Laws (TVD) in the adjoint flow equations.
%           Required for 2nd order upwind schemes (NO, YES)
MUSCL_ADJFLOW= YES
%
% Slope limiter (NONE, VENKATAKRISHNAN, BARTH_JESPERSEN, VAN_ALBADA_EDGE,
%                SHARP_EDGES, WALL_DISTANCE)
SLOPE_LIMITER_ADJFLOW= VENKATAKRISHNAN
%
% Monotonic Upwind Scheme for Conservation Laws (TVD) in the turbulence adjoint equations.
%           Required for 2nd order upwind schemes (NO, YES)
MUSCL_ADJTURB= NO
%
% Slope limiter (NONE, VENKATAKRISHNAN, BARTH_JESPERSEN, VAN_ALBADA_EDGE)
SLOPE_LIMITER_ADJTURB= VENKATAKRISHNAN
%
% Coefficient for the Venkat's limiter (upwind scheme). A larger values decrease
%             the extent of limiting, values approaching zero cause
%             lower-order approximation to the solution (0.05 by default)
VENKAT_LIMITER_COEFF= 0.05
%
% Coefficient for the adjoint sharp edges limiter (3.0 by default).
ADJ_SHARP_LIMITER_COEFF= 3.0
%
% Freeze the value of the limiter after a number of iterations
LIMITER_ITER= 999999
%
% 1st order artificial dissipation coefficients for
%     the Lax–Friedrichs method ( 0.15 by default )
LAX_SENSOR_COEFF= 0.15
%
% 2nd and 4th order artificial dissipation coefficients for
%     the JST method ( 0.5, 0.02 by default )
JST_SENSOR_COEFF= ( 0.5, 0.02 )
%
% 1st order artificial dissipation coefficients for
%     the adjoint Lax–Friedrichs method ( 0.15 by default )
ADJ_LAX_SENSOR_COEFF= 0.15
%
% 2nd, and 4th order artificial dissipation coefficients for
%     the adjoint JST method ( 0.5, 0.02 by default )
ADJ_JST_SENSOR_COEFF= ( 0.5, 0.02 )

% ------------------------ LINEAR SOLVER DEFINITION ---------------------------%
%
% Linear solver or smoother for implicit formulations (BCGSTAB, FGMRES, SMOOTHER_JACOBI, 
%                                                      SMOOTHER_ILU, SMOOTHER_LUSGS, 
%                                                      SMOOTHER_LINELET)
LINEAR_SOLVER= FGMRES
%
% Preconditioner of the Krylov linear solver (ILU, LU_SGS, LINELET, JACOBI)
LINEAR_SOLVER_PREC= ILU
%
% Linael solver ILU preconditioner fill-in level (0 by default)
LINEAR_SOLVER_ILU_FILL_IN= 0
%
% Minimum error of the linear solver for implicit formulations
LINEAR_SOLVER_ERROR= 1E-6
%
% Max number of iterations of the linear solver for the implicit formulation
LINEAR_SOLVER_ITER= 10

% -------------------------- MULTIGRID PARAMETERS -----------------------------%
%
% Multi-grid levels (0 = no multi-grid)
MGLEVEL= 0
%
% Multi-grid cycle (V_CYCLE, W_CYCLE, FULLMG_CYCLE)
MGCYCLE= V_CYCLE
%
% Multi-grid pre-smoothing level
MG_PRE_SMOOTH= ( 1, 2, 3, 3 )
%
% Multi-grid post-smoothing level
MG_POST_SMOOTH= ( 0, 0, 0, 0 )
%
% Jacobi implicit smoothing of the correction
MG_CORRECTION_SMOOTH= ( 0, 0, 0, 0 )
%
% Damping factor for the residual restriction
MG_DAMP_RESTRICTION= 0.75
%
% Damping factor for the correction prolongation
MG_DAMP_PROLONGATION= 0.75

% -------------------- FLOW NUMERICAL METHOD DEFINITION -----------------------%
%
% Convective numerical method (JST, LAX-FRIEDRICH, CUSP, ROE, AUSM, HLLC,
%                              TURKEL_PREC, MSW)
CONV_NUM_METHOD_FLOW= ROE
%
% Roe Low Dissipation function for Hybrid RANS/LES simulations (FD, NTS, NTS_DUCROS)
ROE_LOW_DISSIPATION= FD
%
LOW_MACH_CORR= NO
LOW_MACH_PREC= NO
MAX_ROE_TURKEL_PREC= 5.0
%
% Entropy fix coefficient (0.0 implies no entropy fixing, 1.0 implies scalar
%                          artificial dissipation)
ENTROPY_FIX_COEFF= 0.001
%
% Time discretization (RUNGE-KUTTA_EXPLICIT, EULER_IMPLICIT, EULER_EXPLICIT)
TIME_DISCRE_FLOW= EULER_IMPLICIT
%
% Relaxation coefficient
RELAXATION_FACTOR_FLOW= 0.95

% -------------------- TURBULENT NUMERICAL METHOD DEFINITION ------------------%
%
% Convective numerical method (SCALAR_UPWIND)
CONV_NUM_METHOD_TURB= SCALAR_UPWIND
%
% Time discretization (EULER_IMPLICIT)
TIME_DISCRE_TURB= EULER_IMPLICIT
%
% Reduction factor of the CFL coefficient in the turbulence problem
CFL_REDUCTION_TURB= 1.0
%
% Relaxation coefficient
RELAXATION_FACTOR_TURB= 0.95

% --------------------- HEAT NUMERICAL METHOD DEFINITION ----------------------%
%
% Value of the thermal diffusivity
THERMAL_DIFFUSIVITY= 1.0

% ---------------- ADJOINT-FLOW NUMERICAL METHOD DEFINITION -------------------%
%
% Frozen the slope limiter in the discrete adjoint formulation (NO, YES)
FROZEN_LIMITER_DISC= NO
%
% Frozen the turbulent viscosity in the discrete adjoint formulation (NO, YES)
FROZEN_VISC_DISC= NO
%
% Use an inconsistent spatial integration (primal-dual) in the discrete
% adjoint formulation. The AD will use the numerical methods in
% the ADJOINT-FLOW NUMERICAL METHOD DEFINITION section (NO, YES)
INCONSISTENT_DISC= NO
%
% Convective numerical method (JST, LAX-FRIEDRICH, ROE)
CONV_NUM_METHOD_ADJFLOW= JST
%
% Time discretization (RUNGE-KUTTA_EXPLICIT, EULER_IMPLICIT)
TIME_DISCRE_ADJFLOW= EULER_IMPLICIT
%
% Relaxation coefficient
RELAXATION_FACTOR_ADJFLOW= 1.0
%
% Reduction factor of the CFL coefficient in the adjoint problem
CFL_REDUCTION_ADJFLOW= 0.8
%
% Limit value for the adjoint variable
LIMIT_ADJFLOW= 1E6
%
% Use multigrid in the adjoint problem (NO, YES)
MG_ADJFLOW= YES

% ---------------- ADJOINT-TURBULENT NUMERICAL METHOD DEFINITION --------------%
%
% Convective numerical method (SCALAR_UPWIND)
CONV_NUM_METHOD_ADJTURB= SCALAR_UPWIND
%
% Time discretization (EULER_IMPLICIT)
TIME_DISCRE_ADJTURB= EULER_IMPLICIT
%
% Reduction factor of the CFL coefficient in the adjoint turbulent problem
CFL_REDUCTION_ADJTURB= 0.01

% ----------------------- GEOMETRY EVALUATION PARAMETERS ----------------------%
%
% Marker(s) of the surface where geometrical based function will be evaluated
GEO_MARKER= ( airfoil )
%
% Description of the geometry to be analyzed (AIRFOIL, WING)
GEO_DESCRIPTION= AIRFOIL
%
% Coordinate of the stations to be analyzed
GEO_LOCATION_STATIONS= (0.0, 0.5, 1.0)
%
% Geometrical bounds (Y coordinate) for the wing geometry analysis or
% fuselage evaluation (X coordinate)
GEO_BOUNDS= (1.5, 3.5)
%
% Plot loads and Cp distributions on each airfoil section
GEO_PLOT_STATIONS= NO
%
% Number of section cuts to make when calculating wing geometry
GEO_NUMBER_STATIONS= 25
%
% Geometrical evaluation mode (FUNCTION, GRADIENT)
GEO_MODE= FUNCTION

% ------------------------- GRID ADAPTATION STRATEGY --------------------------%
%
% Kind of grid adaptation (NONE, PERIODIC, FULL, FULL_FLOW, GRAD_FLOW,
%                          FULL_ADJOINT, GRAD_ADJOINT, GRAD_FLOW_ADJ, ROBUST,
%                          FULL_LINEAR, COMPUTABLE, COMPUTABLE_ROBUST,
%                          REMAINING, WAKE, SMOOTHING, SUPERSONIC_SHOCK)
KIND_ADAPT= FULL_FLOW
%
% Percentage of new elements (% of the original number of elements)
NEW_ELEMS= 5
%
% Scale factor for the dual volume
DUALVOL_POWER= 0.5
%
% Adapt the boundary elements (NO, YES)
ADAPT_BOUNDARY= YES

% ----------------------- DESIGN VARIABLE PARAMETERS --------------------------%
%
% Kind of deformation (NO_DEFORMATION, TRANSLATION, ROTATION, SCALE,
%                      FFD_SETTING, FFD_NACELLE
%                      FFD_CONTROL_POINT, FFD_CAMBER, FFD_THICKNESS, FFD_TWIST
%                      FFD_CONTROL_POINT_2D, FFD_CAMBER_2D, FFD_THICKNESS_2D, FFD_TWIST_2D,
%                      HICKS_HENNE, SURFACE_BUMP)
DV_KIND= FFD_SETTING
%
% Marker of the surface in which we are going apply the shape deformation
DV_MARKER= ( airfoil )
%
% Parameters of the shape deformation
% - NO_DEFORMATION ( 1.0 )
% - TRANSLATION ( x_Disp, y_Disp, z_Disp ), as a unit vector
% - ROTATION ( x_Orig, y_Orig, z_Orig, x_End, y_End, z_End )
% - SCALE ( 1.0 )
% - ANGLE_OF_ATTACK ( 1.0 )
% - FFD_SETTING ( 1.0 )
% - FFD_CONTROL_POINT ( FFD_BoxTag, i_Ind, j_Ind, k_Ind, x_Disp, y_Disp, z_Disp )
% - FFD_NACELLE ( FFD_BoxTag, rho_Ind, theta_Ind, phi_Ind, rho_Disp, phi_Disp )
% - FFD_GULL ( FFD_BoxTag, j_Ind )
% - FFD_ANGLE_OF_ATTACK ( FFD_BoxTag, 1.0 )
% - FFD_CAMBER ( FFD_BoxTag, i_Ind, j_Ind )
% - FFD_THICKNESS ( FFD_BoxTag, i_Ind, j_Ind )
% - FFD_TWIST ( FFD_BoxTag, j_Ind, x_Orig, y_Orig, z_Orig, x_End, y_End, z_End )
% - FFD_CONTROL_POINT_2D ( FFD_BoxTag, i_Ind, j_Ind, x_Disp, y_Disp )
% - FFD_CAMBER_2D ( FFD_BoxTag, i_Ind )
% - FFD_THICKNESS_2D ( FFD_BoxTag, i_Ind )
% - FFD_TWIST_2D ( FFD_BoxTag, x_Orig, y_Orig )
% - HICKS_HENNE ( Lower Surface (0)/Upper Surface (1)/Only one Surface (2), x_Loc )
% - SURFACE_BUMP ( x_Start, x_End, x_Loc )
DV_PARAM= ( 1, 0.5 )
%
% Value of the shape deformation
DV_VALUE= 0.01

% ------------------------ GRID DEFORMATION PARAMETERS ------------------------%
%
% Linear solver or smoother for implicit formulations (FGMRES, RESTARTED_FGMRES, BCGSTAB)
DEFORM_LINEAR_SOLVER= FGMRES
%
% Preconditioner of the Krylov linear solver (ILU, LU_SGS, JACOBI)
DEFORM_LINEAR_SOLVER_PREC= ILU
%
% Number of smoothing iterations for mesh deformation
DEFORM_LINEAR_ITER= 1000
%
% Number of nonlinear deformation iterations (surface deformation increments)
DEFORM_NONLINEAR_ITER= 1
%
% Print the residuals during mesh deformation to the console (YES, NO)
DEFORM_CONSOLE_OUTPUT= YES
%
% Factor to multiply smallest cell volume for deform tolerance (0.001 default)
DEFORM_TOL_FACTOR = 1E-6
%
% Deformation coefficient (linear elasticity limits from -1.0 to 0.5, a larger
% value is also possible)
DEFORM_COEFF = 1E6
%
% Type of element stiffness imposed for FEA mesh deformation (INVERSE_VOLUME,
%                                           WALL_DISTANCE, CONSTANT_STIFFNESS)
DEFORM_STIFFNESS_TYPE= WALL_DISTANCE
%
% Deform the grid only close to the surface. It is possible to specify how much
% of the volumetric grid is going to be deformed in meters or inches (1E6 by default)
DEFORM_LIMIT = 1E6
%
% Visualize the deformation (NO, YES)
VISUALIZE_DEFORMATION= NO

% -------------------- FREE-FORM DEFORMATION PARAMETERS -----------------------%
%
% Tolerance of the Free-Form Deformation point inversion
FFD_TOLERANCE= 1E-10
%
% Maximum number of iterations in the Free-Form Deformation point inversion
FFD_ITERATIONS= 500
%
% FFD box definition: 3D case (FFD_BoxTag, X1, Y1, Z1, X2, Y2, Z2, X3, Y3, Z3, X4, Y4, Z4,
%                              X5, Y5, Z5, X6, Y6, Z6, X7, Y7, Z7, X8, Y8, Z8)
%                     2D case (FFD_BoxTag, X1, Y1, 0.0, X2, Y2, 0.0, X3, Y3, 0.0, X4, Y4, 0.0,
%                              0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0)
FFD_DEFINITION= (MAIN_BOX, 0.5, 0.25, -0.25, 1.5, 0.25, -0.25, 1.5, 0.75, -0.25, 0.5, 0.75, -0.25, 0.5, 0.25, 0.25, 1.5, 0.25, 0.25, 1.5, 0.75, 0.25, 0.5, 0.75, 0.25)
%
% FFD box degree: 3D case (x_degree, y_degree, z_degree)
%                 2D case (x_degree, y_degree, 0)
FFD_DEGREE= (10, 10, 1)
%
% Surface grid continuity at the intersection with the faces of the FFD boxes.
% To keep a particular level of surface continuity, SU2 automatically freezes the right
% number of control point planes (NO_DERIVATIVE, 1ST_DERIVATIVE, 2ND_DERIVATIVE, USER_INPUT)
FFD_CONTINUITY= 2ND_DERIVATIVE
%
% Definition of the FFD planes to be frozen in the FFD (x,y,z).
% Value from 0 FFD degree in that direction. Pick a value larger than degree if you don't want to fix any plane.
FFD_FIX_I= (0,2,3)
FFD_FIX_J= (0,2,3)
FFD_FIX_K= (0,2,3)
%
% There is a symmetry plane (j=0) for all the FFD boxes (YES, NO)
FFD_SYMMETRY_PLANE= NO
%
% FFD coordinate system (CARTESIAN)
FFD_COORD_SYSTEM= CARTESIAN
%
% Vector from the cartesian axis the cylindrical or spherical axis (using cartesian coordinates)
% Note that the location of the axis will affect the wall curvature of the FFD box as well as the
% design variable effect.
FFD_AXIS= (0.0, 0.0, 0.0)
%
% FFD Blending function: Bezier curves with global support (BEZIER), uniform BSplines with local support (BSPLINE_UNIFORM)
FFD_BLENDING= BEZIER
%
% Order of the BSplines
FFD_BSPLINE_ORDER= 2, 2, 2

% --------------------------- CONVERGENCE PARAMETERS --------------------------%
%
% Number of total iterations
EXT_ITER= 999999
%
% Convergence criteria (CAUCHY, RESIDUAL)
%
CONV_CRITERIA= RESIDUAL
%
% Residual reduction (order of magnitude with respect to the initial value)
RESIDUAL_REDUCTION= 5
%
% Min value of the residual (log10 of the residual)
RESIDUAL_MINVAL= -8
%
% Start convergence criteria at iteration number
STARTCONV_ITER= 10
%
% Number of elements to apply the criteria
CAUCHY_ELEMS= 100
%
% Epsilon to control the series convergence
CAUCHY_EPS= 1E-10
%
% Direct function to apply the convergence criteria (LIFT, DRAG, NEARFIELD_PRESS)
CAUCHY_FUNC_FLOW= DRAG
%
% Adjoint function to apply the convergence criteria (SENS_GEOMETRY, SENS_MACH)
CAUCHY_FUNC_ADJFLOW= SENS_GEOMETRY

% ------------------------- INPUT/OUTPUT INFORMATION --------------------------%
%
% Mesh input file
MESH_FILENAME= mesh_NACA0012_inv.su2
%
% Mesh input file format (SU2, CGNS)
MESH_FORMAT= SU2
%
% Mesh output file
MESH_OUT_FILENAME= mesh_out.su2
%
% Restart flow input file
SOLUTION_FLOW_FILENAME= solution_flow.dat
%
% Restart adjoint input file
SOLUTION_ADJ_FILENAME= solution_adj.dat
%
% Output file format (TECPLOT, TECPLOT_BINARY, PARAVIEW,
%                     FIELDVIEW, FIELDVIEW_BINARY)
OUTPUT_FORMAT= TECPLOT
%
% Output file convergence history (w/o extension)
CONV_FILENAME= history
%
% Output file with the forces breakdown
BREAKDOWN_FILENAME= forces_breakdown.dat
%
% Output file restart flow
RESTART_FLOW_FILENAME= restart_flow.dat
%
% Output file restart adjoint
RESTART_ADJ_FILENAME= restart_adj.dat
%
% Output file flow (w/o extension) variables
VOLUME_FLOW_FILENAME= flow
%
% Output file adjoint (w/o extension) variables
VOLUME_ADJ_FILENAME= adjoint
%
% Output Objective function
VALUE_OBJFUNC_FILENAME= of_eval.dat
%
% Output objective function gradient (using continuous adjoint)
GRAD_OBJFUNC_FILENAME= of_grad.dat
%
% Output file surface flow coefficient (w/o extension)
SURFACE_FLOW_FILENAME= surface_flow
%
% Output file surface adjoint coefficient (w/o extension)
SURFACE_ADJ_FILENAME= surface_adjoint
%
% Writing solution file frequency
WRT_SOL_FREQ= 1000
%
% Writing solution file frequency for physical time steps (dual time)
WRT_SOL_FREQ_DUALTIME= 1
%
% Writing convergence history frequency
WRT_CON_FREQ= 1
%
% Writing convergence history frequency (dual time, only written to screen)
WRT_CON_FREQ_DUALTIME= 10
%
% Output residual values in the solution files
WRT_RESIDUALS= NO
%
% Output limiters values in the solution files
WRT_LIMITERS= NO
%
% Output the sharp edges detector
WRT_SHARPEDGES= NO
%
% Output the solution at each surface in the history file
WRT_SURFACE= NO
%
% Minimize the required output memory
LOW_MEMORY_OUTPUT= NO
%
% Verbosity of console output: NONE removes minor MPI overhead (NONE, HIGH)
CONSOLE_OUTPUT_VERBOSITY= HIGH
%
% Write binary restart files (YES, NO)
WRT_BINARY_RESTART= YES
%
% Read binary restart files (YES, NO)
READ_BINARY_RESTART= YES
%
% Reorient elements based on potential negative volumes (YES/NO)
REORIENT_ELEMENTS= YES

% --------------------- OPTIMAL SHAPE DESIGN DEFINITION -----------------------%
%
% Available flow based objective functions or constraint functions
%    DRAG, LIFT, SIDEFORCE, EFFICIENCY,
%    FORCE_X, FORCE_Y, FORCE_Z,
%    MOMENT_X, MOMENT_Y, MOMENT_Z,
%    THRUST, TORQUE, FIGURE_OF_MERIT,
%    EQUIVALENT_AREA, NEARFIELD_PRESSURE,
%    TOTAL_HEATFLUX, MAXIMUM_HEATFLUX,
%    INVERSE_DESIGN_PRESSURE, INVERSE_DESIGN_HEATFLUX,
%    SURFACE_TOTAL_PRESSURE, SURFACE_MASSFLOW
%    SURFACE_STATIC_PRESSURE, SURFACE_MACH
%
% Available geometrical based objective functions or constraint functions
%    AIRFOIL_AREA, AIRFOIL_THICKNESS, AIRFOIL_CHORD, AIRFOIL_TOC, AIRFOIL_AOA,
%    WING_VOLUME, WING_MIN_THICKNESS, WING_MAX_THICKNESS, WING_MAX_CHORD, WING_MIN_TOC, WING_MAX_TWIST, WING_MAX_CURVATURE, WING_MAX_DIHEDRAL
%    STATION#_WIDTH, STATION#_AREA, STATION#_THICKNESS, STATION#_CHORD, STATION#_TOC,
%    STATION#_TWIST (where # is the index of the station defined in GEO_LOCATION_STATIONS)
%
% Available design variables
% 2D Design variables
%    HICKS_HENNE 	      (   1, Scale | Mark. List | Lower(0)/Upper(1) side, x_Loc )
%    FFD_CONTROL_POINT_2D (  15, Scale | Mark. List | FFD_BoxTag, i_Ind, j_Ind, x_Mov, y_Mov )
%    FFD_CAMBER_2D 	      (  16, Scale | Mark. List | FFD_BoxTag, i_Ind )
%    FFD_THICKNESS_2D 	  (  17, Scale | Mark. List | FFD_BoxTag, i_Ind )
%    FFD_TWIST_2D    	  (  20, Scale | Mark. List | FFD_BoxTag, x_Orig, y_Orig )
%    ANGLE_OF_ATTACK	  ( 101, Scale | Mark. List | 1.0 )
%
% 3D Design variables
%    FFD_CONTROL_POINT   (   7, Scale | Mark. List | FFD_BoxTag, i_Ind, j_Ind, k_Ind, x_Mov, y_Mov, z_Mov )
%    FFD_NACELLE         (  22, Scale | Mark. List | FFD_BoxTag, rho_Ind, theta_Ind, phi_Ind, rho_Mov, phi_Mov )
%    FFD_GULL            (  23, Scale | Mark. List | FFD_BoxTag, j_Ind )
%    FFD_CAMBER      	 (  11, Scale | Mark. List | FFD_BoxTag, i_Ind, j_Ind )
%    FFD_THICKNESS 	     (  12, Scale | Mark. List | FFD_BoxTag, i_Ind, j_Ind )
%    FFD_TWIST    	     (  19, Scale | Mark. List | FFD_BoxTag, j_Ind, x_Orig, y_Orig, z_Orig, x_End, y_End, z_End )
%    FFD_ROTATION	     (  25, Scale | Mark. List | FFD_BoxTag, x_Axis, y_Axis, z_Axis, x_Turn, y_Turn, z_Turn )
%    FFD_ANGLE_OF_ATTACK ( 102, Scale | Mark. List | FFD_BoxTag, 1.0 )
%
% Global design variables
%    TRANSLATION  ( 5, Scale | Mark. List | x_Disp, y_Disp, z_Disp )
%    ROTATION	  ( 6, Scale | Mark. List | x_Axis, y_Axis, z_Axis, x_Turn, y_Turn, z_Turn )
%
% Definition of multipoint design problems, this option should be combined with the
% the prefix MULTIPOINT in the objective function or constraint (e.g. MULTIPOINT_DRAG, MULTIPOINT_LIFT, etc.)
MULTIPOINT_MACH_NUMBER= (0.79, 0.8, 0.81)
MULTIPOINT_AOA= (1.25, 1.25, 1.25)
MULTIPOINT_SIDESLIP_ANGLE= (0.0, 0.0, 0.0)
MULTIPOINT_TARGET_CL= (0.8, 0.8, 0.8)
MULTIPOINT_REYNOLDS_NUMBER= (1E6, 1E6, 1E6)
MULTIPOINT_FREESTREAM_PRESSURE= (101325.0, 101325.0, 101325.0)
MULTIPOINT_FREESTREAM_TEMPERATURE= (288.15, 288.15, 288.15)
MULTIPOINT_WEIGHT= (0.33333, 0.33333, 0.33333)
%
% Optimization objective function with scaling factor, separated by semicolons.
% To include quadratic penalty function: use OPT_CONSTRAINT option syntax within the OPT_OBJECTIVE list.
% ex= Objective * Scale
OPT_OBJECTIVE= DRAG
%
% Optimization constraint functions with pushing factors (affects its value, not the gradient  in the python scripts), separated by semicolons
% ex= (Objective = Value ) * Scale, use '>','<','='
OPT_CONSTRAINT= ( LIFT > 0.328188 ) * 0.001; ( MOMENT_Z > 0.034068 ) * 0.001; ( AIRFOIL_THICKNESS > 0.11 ) * 0.001
%
% Factor to reduce the norm of the gradient (affects the objective function and gradient in the python scripts)
% In general, a norm of the gradient ~1E-6 is desired.
OPT_GRADIENT_FACTOR= 1E-6
%
% Factor to relax or accelerate the optimizer convergence (affects the line search in SU2_DEF)
% In general, surface deformations of 0.01'' or 0.0001m are desirable
OPT_RELAX_FACTOR= 1E3
%
% Maximum number of iterations
OPT_ITERATIONS= 100
%
% Requested accuracy
OPT_ACCURACY= 1E-10
%
% Optimization bound (bounds the line search in SU2_DEF)
OPT_LINE_SEARCH_BOUND= 1E6
%
% Upper bound for each design variable (bound in the python optimizer)
OPT_BOUND_UPPER= 1E10
%
% Lower bound for each design variable (bound in the python optimizer)
OPT_BOUND_LOWER= -1E10
%
% Finite difference step size for python scripts (0.001 default, recommended
%												  0.001 x REF_LENGTH)
FIN_DIFF_STEP = 0.001
%
% Optimization design variables, separated by semicolons
DEFINITION_DV= ( 1, 1.0 | airfoil | 0, 0.05 ); ( 1, 1.0 | airfoil | 0, 0.10 ); ( 1, 1.0 | airfoil | 0, 0.15 ); ( 1, 1.0 | airfoil | 0, 0.20 ); ( 1, 1.0 | airfoil | 0, 0.25 ); ( 1, 1.0 | airfoil | 0, 0.30 ); ( 1, 1.0 | airfoil | 0, 0.35 ); ( 1, 1.0 | airfoil | 0, 0.40 ); ( 1, 1.0 | airfoil | 0, 0.45 ); ( 1, 1.0 | airfoil | 0, 0.50 ); ( 1, 1.0 | airfoil | 0, 0.55 ); ( 1, 1.0 | airfoil | 0, 0.60 ); ( 1, 1.0 | airfoil | 0, 0.65 ); ( 1, 1.0 | airfoil | 0, 0.70 ); ( 1, 1.0 | airfoil | 0, 0.75 ); ( 1, 1.0 | airfoil | 0, 0.80 ); ( 1, 1.0 | airfoil | 0, 0.85 ); ( 1, 1.0 | airfoil | 0, 0.90 ); ( 1, 1.0 | airfoil | 0, 0.95 ); ( 1, 1.0 | airfoil | 1, 0.05 ); ( 1, 1.0 | airfoil | 1, 0.10 ); ( 1, 1.0 | airfoil | 1, 0.15 ); ( 1, 1.0 | airfoil | 1, 0.20 ); ( 1, 1.0 | airfoil | 1, 0.25 ); ( 1, 1.0 | airfoil | 1, 0.30 ); ( 1, 1.0 | airfoil | 1, 0.35 ); ( 1, 1.0 | airfoil | 1, 0.40 ); ( 1, 1.0 | airfoil | 1, 0.45 ); ( 1, 1.0 | airfoil | 1, 0.50 ); ( 1, 1.0 | airfoil | 1, 0.55 ); ( 1, 1.0 | airfoil | 1, 0.60 ); ( 1, 1.0 | airfoil | 1, 0.65 ); ( 1, 1.0 | airfoil | 1, 0.70 ); ( 1, 1.0 | airfoil | 1, 0.75 ); ( 1, 1.0 | airfoil | 1, 0.80 ); ( 1, 1.0 | airfoil | 1, 0.85 ); ( 1, 1.0 | airfoil | 1, 0.90 ); ( 1, 1.0 | airfoil | 1, 0.95 )
%
% Use combined objective within gradient evaluation: may reduce cost to compute gradients when using the adjoint formulation.
OPT_COMBINE_OBJECTIVE = NO
