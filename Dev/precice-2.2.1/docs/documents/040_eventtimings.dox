/**
@page eventtimings Event Timings

Measuring timings in preCICE
============================
See also the README at https://github.com/precice/EventTimings

Usage
-----

preCICE includes functionality to measure timings of certain code blocks.
````
#include "utils/Event.hpp"
using precice::utils::Event;

void foo()
{
  Event e("advance");
  // do some stuff
  e.stop();
  // e is also stopped automatically at destruction
}
````

At the end of a run, output is printed

```
Run finished at Wed Aug  1 09:41:10 2018
Global runtime       = 12859ms / 12s
Number of processors = 4
# Rank: 0

  Event |      Count |  Total[ms] |    Max[ms] |    Min[ms] |    Avg[ms] |       T[%] |
---------------------------------------------------------------------------------------
_GLOBAL |          1 |      12859 |      12859 |      12859 |      12859 |         99 |
advance |          1 |         84 |         84 |         84 |         84 |          0 |

   Name |        Max |  MaxOnRank |        Min |  MinOnRank |    Min/Max |
--------------------------------------------------------------------------
_GLOBAL |      12859 |          0 |      12859 |          0 |          1 |
advance |        119 |          2 |         83 |          1 |          0 |
```

T% prints the relative runtime. Note that this can be more than 100% summed up, since events can be nested, like in the example above.

In addition to the output there are two files written. Firstly, in \c EventTimings-A.log, the aggregated information from the table above is contained. Secondly, in \c Events-A.log  all state changes (stopped -> started -> stopped) are logged. The filenames are suffixed by the participants name, here A.

If you just want to measure precice internal functions that's about it.

Internals
---------

 The EventTimings classes use a singleton instance to save Events and the global start / stop time. To start the measurement call \c precice::utils::EventRegistry::instance().initialize(_accessorName)  and \c precice::utils::EventRegistry::instance().finalize() to stop. This is done by precice and normally should not be needed to call explicitely. Keep in mind that multiple calls to initalize or finalize may mess up global timings.

Usually an event is auto started when instantiated. You can use \c Event e("name", false, false) to override that and use \c e.start() to start it later. An Event can also act as a barrier, see the Event constructuor. Multiple calls to \c start() or \c stop() have no effect.

Precice uses an signal handler for the signals \c SIGSEV, \c SIGABRT, \c SIGTERM as a crash handler that calls \c  precice::utils::EventRegistry::signal_handler(int signal) to still finalize and print when precice exists ungracefully.
*/
