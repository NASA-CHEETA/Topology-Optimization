/**

@dir cplscheme

This directory contains classes modelling coupling schemes to interconnect solver
codes. With help of that schemes, a solution of the overall equation-system of the
coupled simulation is tried to achieve. The interface class for this component is
CouplingScheme. Currently two (working) subclasses do exist:

- ExplicitCouplingScheme
- ImplicitCouplingScheme

Class ImplicitCouplingScheme uses other classes to setup its behavior, namely the
ones derived from the interface ConvergenceMeasure.

In order to use a coupling scheme, mesh::Mesh objects holding the coupling
data have to be loaded. A coupling scheme is a state machine whose state is
advanced by external control through the methods

- initialize()
- advance()
- finalize()
 
The example code below illustrates the usage of a coupling scheme.


    
@code        
#include "cplscheme/ExplicitCouplingScheme.hpp"
#include "mesh/Data.hpp"
#include "mesh/Mesh.hpp"

using namespace mesh;
using namespace cplscheme;

std::string nameThisSolver ( "ThisSolverName" );
std::string nameOtherSolver ( "OtherSolverName" );

// Create one data
std::string dataName ( "MyData" );
Data::DataTypeConstants dataType ( Data::TYPE_VECTOR );
int dataID ( 1 );
Data data ( dataName, dataType, dataID );

// Create a mesh (in a real example, it has to be filled with Vertices, ...)
std::string meshName ( "MyMesh" );
bool flipNormals = false;
Mesh mesh ( meshName, flipNormals );
mesh.setVertexData ( data );

// Create explicit coupling scheme object
double maxSimulationTime = 1.0;
int maxSimulationTimesteps = 100;
double timesteplength = 0.01;
std::string nameFirstParticipant ( nameThisSolver );
std::string nameSecondParticipant ( nameOtherSolver );
ExplicitCouplingScheme cplScheme ( 
   maxSimulationTime, maxSimulationTimesteps, timestepLength, 
   nameFirstParticipant, nameSecondParticipant );
cplScheme.addMesh ( mesh );
std::string nameDataCreator ( nameThisSolver );
cplScheme.addDataToExchange ( nameDataCreator, dataID );

// Use coupling scheme
cplScheme.initialize ( nameThisSolver ); // Personalizes the cplScheme object

while ( cplScheme.isCouplingOngoing() ) {

   // ...

   cplScheme.advance ( computedTimestepLength );

   // ...

}

cplScheme.finalize ();

@endcode

*/