/**

@dir precice

This directory contains the API of preCICE. The main C++ interface to preCICE is
formed by the class SolverInterface. Other classes can be used in combination
with it. The directory $bindings$ contains additional interfaces to preCICE,
currently there is only a C interface. SolverInterface combines the functionalities
of all other components of preCICE and provides a high level interface to it,
which is meant to be used in solver codes to make use of preCICE as coupling
library and/or geometry interface. A typical solver code can be enhanced by the
preCICE API as illustrated in the following example.

@code
#include "SolverInterface.hpp"

using namespace precice;

SolverInterface interface ( "SolverName" );
interface.configure ( "precice_config.xml" );

int forceDataID = interface.getDataID ( "Forces" );
int temperatureDataID = interface.getDataID ( "Temperature" );
int obstacleGeometryID = interface.getMeshID ( "ObstacleName" );

double dtLimit = interface.initialize();

while ( interface.isCouplingOngoing() ){
   // Read data written by other solvers, if available.
   if ( interface.isReadDataAvailable() ){
      // ...
      double temperatureValue;  // Container for data to be read 
      interface.readScalarData ( temperatureDataID, solverNodeCoordinates, 
                                 temperatureValue );
      // ...
   }

   // Examplary computation of one boundary data entry
   double* forceValue = solverComputeForce();
   
   // ...
   
   if ( interface.isWriteDataRequired(computedTimestepLength) ) {
      // ...
      interface.writeVectorData ( forceDataID, solverNodeCoords, forceValue );
      // ...
   }

   // When all data values are written, the simulation can be advanced.
   // preCICE automatically exchanges data between coupled solvers and 
   // computes the current state of the simulation. It uses the timestep length
   // of the solver timestep for that, and returns an upper limit for the next
   // timestep of the solver.
   dtLimit = interface.advance ( computedTimestepLength );
}

// A call to finalize cleans up data structures and disconnects coupled solvers
// properly.
interface.finalize();

@endcode

*/
